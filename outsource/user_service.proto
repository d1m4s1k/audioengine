syntax = "proto3";
package audio_engine;
option optimize_for = LITE_RUNTIME;

enum DEVICE_TYPE
{
    DEVICE_UNKNOWN = 0;
    DEVICE_WINDOWS = 1;
	DEVICE_ANDROID = 2;
	DEVICE_IOS     = 3;
	DEVICE_LINUX   = 4;
	DEVICE_WEB     = 8;
}

enum USER_STATE
{
     STATE_INVALID = 0;
     STATE_CAPTURE = 1; // 某人打开麦克风采集声音
	 STATE_PLAYOUT = 2; // 某人打开播放器播放声音
	 STATE_BLOCKED = 4; // 拒绝听某人发言，服务器不下发流到本地，其他人不受影响
	 STATE_BANNED  = 8; // 某人被禁止发言，需要管理员权限
}

message RequestLogin
{
  string userid       = 1;       // 用户自定义，如果房间里有重复，就踢掉原先的老用户
  string extend       = 2;       // 扩展信息，自定义
  string version      = 3;       // sdk版本
  DEVICE_TYPE devtype = 4;       // 登陆设备类型
  int32 state    = 5;       //
}

message ResponedLogin
{
   string userid     = 1;    // request 传上来的userid，用户自定义的
   int64  token      = 2;    // token是服务器统一分配的，唯一标识。
   int32  error_code = 3;    // 登陆结果，0表示成功，非0参照错误码
}

message RequestLogout
{
    int64 token = 1;        // 之前登陆下发的token
}

message ResponedLogout
{
    int64 token = 1;       // 之前登陆下发的token
	int64 error_code = 2;  // 错误码，尽管可能有错误，但是还是强制退出房间
}

message NotifyLogin
{
    string userid       = 1;   // ...
	int64  token        = 2;   // ... 
	string extend       = 3;   // ...
	DEVICE_TYPE devtype = 4;   // ...
	int32 state    = 5;
}

message NotifyLogout
{
    int64 token         = 1;
}

message UpdateUserState
{
    int64 src_token     = 1;
    int64 dst_token     = 2;
	int32 state    = 3;
	int32 error_code    = 4;
}

message UpdateUserExtend
{
    int64 token         = 1;
	string extend       = 2;
	int32 error_code    = 3;
}

message UserInfo
{
  string userid       = 1;       // 用户自定义，如果房间里有重复，就踢掉原先的老用户
  string extend       = 2;       // 扩展信息，自定义
  DEVICE_TYPE devtype = 3;       // 登陆设备类型
  int32  state        = 4;       // see USER_STATE
  int64  token        = 5; 
}

enum ePkgFlag
{
	FLAG_CONTINUE  = 0;
    FLAG_FIRST_PKG = 1;
	FLAG_LAST_PKG  = 2;
}
message NotifyUserList
{
    repeated UserInfo user = 1;
	int32    pkg_flag      = 2; //see eEndFlag
}

message RAUserMessage
{
    int32               sn = 1;//0表示推送消息，其他表示响应消息
	RequestLogin        request_login         = 2;
	ResponedLogin       responed_login        = 3;
	RequestLogout       request_logout        = 4;
    ResponedLogout      responed_logout       = 5;	
    NotifyLogin         notify_login          = 6;
	NotifyLogout        notify_logout         = 7;
	UpdateUserState     update_user_state     = 8;
	UpdateUserExtend    update_user_extend    = 9;
	NotifyUserList      notify_user_list      = 10;
}