// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace audio_engine {
class LoginRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginRequest> {
} _LoginRequest_default_instance_;
class LoginResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginResponse> {
} _LoginResponse_default_instance_;
class LogoutRequstDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogoutRequst> {
} _LogoutRequst_default_instance_;
class LogoutResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogoutResponse> {
} _LogoutResponse_default_instance_;
class LoginNotifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginNotify> {
} _LoginNotify_default_instance_;
class RAUserMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RAUserMessage> {
} _RAUserMessage_default_instance_;

namespace protobuf_user_5fservice_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _LoginRequest_default_instance_.Shutdown();
  _LoginResponse_default_instance_.Shutdown();
  _LogoutRequst_default_instance_.Shutdown();
  _LogoutResponse_default_instance_.Shutdown();
  _LoginNotify_default_instance_.Shutdown();
  _RAUserMessage_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LoginRequest_default_instance_.DefaultConstruct();
  _LoginResponse_default_instance_.DefaultConstruct();
  _LogoutRequst_default_instance_.DefaultConstruct();
  _LogoutResponse_default_instance_.DefaultConstruct();
  _LoginNotify_default_instance_.DefaultConstruct();
  _RAUserMessage_default_instance_.DefaultConstruct();
  _RAUserMessage_default_instance_.get_mutable()->login_requst_ = const_cast< ::audio_engine::LoginRequest*>(
      ::audio_engine::LoginRequest::internal_default_instance());
  _RAUserMessage_default_instance_.get_mutable()->login_response_ = const_cast< ::audio_engine::LoginResponse*>(
      ::audio_engine::LoginResponse::internal_default_instance());
  _RAUserMessage_default_instance_.get_mutable()->logout_requst_ = const_cast< ::audio_engine::LogoutRequst*>(
      ::audio_engine::LogoutRequst::internal_default_instance());
  _RAUserMessage_default_instance_.get_mutable()->logout_response_ = const_cast< ::audio_engine::LogoutResponse*>(
      ::audio_engine::LogoutResponse::internal_default_instance());
  _RAUserMessage_default_instance_.get_mutable()->logout_notify_ = const_cast< ::audio_engine::LoginNotify*>(
      ::audio_engine::LoginNotify::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_user_5fservice_2eproto

bool RAMSG_IsValid(int value) {
  switch (value) {
    case 0:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
      return true;
    default:
      return false;
  }
}

bool DEVICE_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kUseridFieldNumber;
const int LoginRequest::kUsernameFieldNumber;
const int LoginRequest::kTypeFieldNumber;
const int LoginRequest::kExtendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:audio_engine.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.userid().size() > 0) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  extends_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.extends().size() > 0) {
    extends_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extends_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:audio_engine.LoginRequest)
}

void LoginRequest::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extends_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:audio_engine.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extends_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginRequest& LoginRequest::default_instance() {
  protobuf_user_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:audio_engine.LoginRequest)
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extends_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:audio_engine.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "audio_engine.LoginRequest.userid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "audio_engine.LoginRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .audio_engine.DEVICE_TYPE type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::audio_engine::DEVICE_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string extends = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extends()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extends().data(), this->extends().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "audio_engine.LoginRequest.extends"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:audio_engine.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:audio_engine.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:audio_engine.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userid = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "audio_engine.LoginRequest.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "audio_engine.LoginRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // .audio_engine.DEVICE_TYPE type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // string extends = 4;
  if (this->extends().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extends().data(), this->extends().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "audio_engine.LoginRequest.extends");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->extends(), output);
  }

  // @@protoc_insertion_point(serialize_end:audio_engine.LoginRequest)
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audio_engine.LoginRequest)
  size_t total_size = 0;

  // string userid = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string extends = 4;
  if (this->extends().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extends());
  }

  // .audio_engine.DEVICE_TYPE type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginRequest*>(&from));
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:audio_engine.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.extends().size() > 0) {

    extends_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extends_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audio_engine.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  userid_.Swap(&other->userid_);
  username_.Swap(&other->username_);
  extends_.Swap(&other->extends_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LoginRequest::GetTypeName() const {
  return "audio_engine.LoginRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// string userid = 1;
void LoginRequest::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::userid() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginRequest.userid)
  return userid_.GetNoArena();
}
void LoginRequest::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audio_engine.LoginRequest.userid)
}
#if LANG_CXX11
void LoginRequest::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:audio_engine.LoginRequest.userid)
}
#endif
void LoginRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audio_engine.LoginRequest.userid)
}
void LoginRequest::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audio_engine.LoginRequest.userid)
}
::std::string* LoginRequest::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:audio_engine.LoginRequest.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_userid() {
  // @@protoc_insertion_point(field_release:audio_engine.LoginRequest.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:audio_engine.LoginRequest.userid)
}

// string username = 2;
void LoginRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginRequest.username)
  return username_.GetNoArena();
}
void LoginRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audio_engine.LoginRequest.username)
}
#if LANG_CXX11
void LoginRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:audio_engine.LoginRequest.username)
}
#endif
void LoginRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audio_engine.LoginRequest.username)
}
void LoginRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audio_engine.LoginRequest.username)
}
::std::string* LoginRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:audio_engine.LoginRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:audio_engine.LoginRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:audio_engine.LoginRequest.username)
}

// .audio_engine.DEVICE_TYPE type = 3;
void LoginRequest::clear_type() {
  type_ = 0;
}
::audio_engine::DEVICE_TYPE LoginRequest::type() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginRequest.type)
  return static_cast< ::audio_engine::DEVICE_TYPE >(type_);
}
void LoginRequest::set_type(::audio_engine::DEVICE_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LoginRequest.type)
}

// string extends = 4;
void LoginRequest::clear_extends() {
  extends_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::extends() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginRequest.extends)
  return extends_.GetNoArena();
}
void LoginRequest::set_extends(const ::std::string& value) {
  
  extends_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audio_engine.LoginRequest.extends)
}
#if LANG_CXX11
void LoginRequest::set_extends(::std::string&& value) {
  
  extends_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:audio_engine.LoginRequest.extends)
}
#endif
void LoginRequest::set_extends(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extends_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audio_engine.LoginRequest.extends)
}
void LoginRequest::set_extends(const char* value, size_t size) {
  
  extends_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audio_engine.LoginRequest.extends)
}
::std::string* LoginRequest::mutable_extends() {
  
  // @@protoc_insertion_point(field_mutable:audio_engine.LoginRequest.extends)
  return extends_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_extends() {
  // @@protoc_insertion_point(field_release:audio_engine.LoginRequest.extends)
  
  return extends_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_extends(::std::string* extends) {
  if (extends != NULL) {
    
  } else {
    
  }
  extends_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extends);
  // @@protoc_insertion_point(field_set_allocated:audio_engine.LoginRequest.extends)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kUseridFieldNumber;
const int LoginResponse::kLoginResultFieldNumber;
const int LoginResponse::kUserTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:audio_engine.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.userid().size() > 0) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  ::memcpy(&user_token_, &from.user_token_,
    reinterpret_cast<char*>(&login_result_) -
    reinterpret_cast<char*>(&user_token_) + sizeof(login_result_));
  // @@protoc_insertion_point(copy_constructor:audio_engine.LoginResponse)
}

void LoginResponse::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_token_, 0, reinterpret_cast<char*>(&login_result_) -
    reinterpret_cast<char*>(&user_token_) + sizeof(login_result_));
  _cached_size_ = 0;
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:audio_engine.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginResponse& LoginResponse::default_instance() {
  protobuf_user_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginResponse* LoginResponse::New(::google::protobuf::Arena* arena) const {
  LoginResponse* n = new LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:audio_engine.LoginResponse)
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_token_, 0, reinterpret_cast<char*>(&login_result_) -
    reinterpret_cast<char*>(&user_token_) + sizeof(login_result_));
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:audio_engine.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "audio_engine.LoginResponse.userid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 login_result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 user_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:audio_engine.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:audio_engine.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:audio_engine.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userid = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "audio_engine.LoginResponse.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // int32 login_result = 2;
  if (this->login_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->login_result(), output);
  }

  // int64 user_token = 3;
  if (this->user_token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->user_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:audio_engine.LoginResponse)
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audio_engine.LoginResponse)
  size_t total_size = 0;

  // string userid = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // int64 user_token = 3;
  if (this->user_token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_token());
  }

  // int32 login_result = 2;
  if (this->login_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->login_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginResponse*>(&from));
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:audio_engine.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.user_token() != 0) {
    set_user_token(from.user_token());
  }
  if (from.login_result() != 0) {
    set_login_result(from.login_result());
  }
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audio_engine.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  userid_.Swap(&other->userid_);
  std::swap(user_token_, other->user_token_);
  std::swap(login_result_, other->login_result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LoginResponse::GetTypeName() const {
  return "audio_engine.LoginResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResponse

// string userid = 1;
void LoginResponse::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginResponse::userid() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginResponse.userid)
  return userid_.GetNoArena();
}
void LoginResponse::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audio_engine.LoginResponse.userid)
}
#if LANG_CXX11
void LoginResponse::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:audio_engine.LoginResponse.userid)
}
#endif
void LoginResponse::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audio_engine.LoginResponse.userid)
}
void LoginResponse::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audio_engine.LoginResponse.userid)
}
::std::string* LoginResponse::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:audio_engine.LoginResponse.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResponse::release_userid() {
  // @@protoc_insertion_point(field_release:audio_engine.LoginResponse.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:audio_engine.LoginResponse.userid)
}

// int32 login_result = 2;
void LoginResponse::clear_login_result() {
  login_result_ = 0;
}
::google::protobuf::int32 LoginResponse::login_result() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginResponse.login_result)
  return login_result_;
}
void LoginResponse::set_login_result(::google::protobuf::int32 value) {
  
  login_result_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LoginResponse.login_result)
}

// int64 user_token = 3;
void LoginResponse::clear_user_token() {
  user_token_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LoginResponse::user_token() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginResponse.user_token)
  return user_token_;
}
void LoginResponse::set_user_token(::google::protobuf::int64 value) {
  
  user_token_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LoginResponse.user_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutRequst::kUserTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutRequst::LogoutRequst()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:audio_engine.LogoutRequst)
}
LogoutRequst::LogoutRequst(const LogoutRequst& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_token_ = from.user_token_;
  // @@protoc_insertion_point(copy_constructor:audio_engine.LogoutRequst)
}

void LogoutRequst::SharedCtor() {
  user_token_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

LogoutRequst::~LogoutRequst() {
  // @@protoc_insertion_point(destructor:audio_engine.LogoutRequst)
  SharedDtor();
}

void LogoutRequst::SharedDtor() {
}

void LogoutRequst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogoutRequst& LogoutRequst::default_instance() {
  protobuf_user_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogoutRequst* LogoutRequst::New(::google::protobuf::Arena* arena) const {
  LogoutRequst* n = new LogoutRequst;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogoutRequst::Clear() {
// @@protoc_insertion_point(message_clear_start:audio_engine.LogoutRequst)
  user_token_ = GOOGLE_LONGLONG(0);
}

bool LogoutRequst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:audio_engine.LogoutRequst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:audio_engine.LogoutRequst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:audio_engine.LogoutRequst)
  return false;
#undef DO_
}

void LogoutRequst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:audio_engine.LogoutRequst)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_token = 1;
  if (this->user_token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:audio_engine.LogoutRequst)
}

size_t LogoutRequst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audio_engine.LogoutRequst)
  size_t total_size = 0;

  // int64 user_token = 1;
  if (this->user_token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRequst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogoutRequst*>(&from));
}

void LogoutRequst::MergeFrom(const LogoutRequst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:audio_engine.LogoutRequst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_token() != 0) {
    set_user_token(from.user_token());
  }
}

void LogoutRequst::CopyFrom(const LogoutRequst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audio_engine.LogoutRequst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequst::IsInitialized() const {
  return true;
}

void LogoutRequst::Swap(LogoutRequst* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutRequst::InternalSwap(LogoutRequst* other) {
  std::swap(user_token_, other->user_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LogoutRequst::GetTypeName() const {
  return "audio_engine.LogoutRequst";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutRequst

// int64 user_token = 1;
void LogoutRequst::clear_user_token() {
  user_token_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LogoutRequst::user_token() const {
  // @@protoc_insertion_point(field_get:audio_engine.LogoutRequst.user_token)
  return user_token_;
}
void LogoutRequst::set_user_token(::google::protobuf::int64 value) {
  
  user_token_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LogoutRequst.user_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutResponse::kUserTokenFieldNumber;
const int LogoutResponse::kLogoutStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutResponse::LogoutResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:audio_engine.LogoutResponse)
}
LogoutResponse::LogoutResponse(const LogoutResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_token_, &from.user_token_,
    reinterpret_cast<char*>(&logout_status_) -
    reinterpret_cast<char*>(&user_token_) + sizeof(logout_status_));
  // @@protoc_insertion_point(copy_constructor:audio_engine.LogoutResponse)
}

void LogoutResponse::SharedCtor() {
  ::memset(&user_token_, 0, reinterpret_cast<char*>(&logout_status_) -
    reinterpret_cast<char*>(&user_token_) + sizeof(logout_status_));
  _cached_size_ = 0;
}

LogoutResponse::~LogoutResponse() {
  // @@protoc_insertion_point(destructor:audio_engine.LogoutResponse)
  SharedDtor();
}

void LogoutResponse::SharedDtor() {
}

void LogoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogoutResponse& LogoutResponse::default_instance() {
  protobuf_user_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogoutResponse* LogoutResponse::New(::google::protobuf::Arena* arena) const {
  LogoutResponse* n = new LogoutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:audio_engine.LogoutResponse)
  ::memset(&user_token_, 0, reinterpret_cast<char*>(&logout_status_) -
    reinterpret_cast<char*>(&user_token_) + sizeof(logout_status_));
}

bool LogoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:audio_engine.LogoutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 logout_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logout_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:audio_engine.LogoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:audio_engine.LogoutResponse)
  return false;
#undef DO_
}

void LogoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:audio_engine.LogoutResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_token = 1;
  if (this->user_token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_token(), output);
  }

  // int64 logout_status = 2;
  if (this->logout_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->logout_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:audio_engine.LogoutResponse)
}

size_t LogoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audio_engine.LogoutResponse)
  size_t total_size = 0;

  // int64 user_token = 1;
  if (this->user_token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_token());
  }

  // int64 logout_status = 2;
  if (this->logout_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->logout_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogoutResponse*>(&from));
}

void LogoutResponse::MergeFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:audio_engine.LogoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_token() != 0) {
    set_user_token(from.user_token());
  }
  if (from.logout_status() != 0) {
    set_logout_status(from.logout_status());
  }
}

void LogoutResponse::CopyFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audio_engine.LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResponse::IsInitialized() const {
  return true;
}

void LogoutResponse::Swap(LogoutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutResponse::InternalSwap(LogoutResponse* other) {
  std::swap(user_token_, other->user_token_);
  std::swap(logout_status_, other->logout_status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LogoutResponse::GetTypeName() const {
  return "audio_engine.LogoutResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutResponse

// int64 user_token = 1;
void LogoutResponse::clear_user_token() {
  user_token_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LogoutResponse::user_token() const {
  // @@protoc_insertion_point(field_get:audio_engine.LogoutResponse.user_token)
  return user_token_;
}
void LogoutResponse::set_user_token(::google::protobuf::int64 value) {
  
  user_token_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LogoutResponse.user_token)
}

// int64 logout_status = 2;
void LogoutResponse::clear_logout_status() {
  logout_status_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LogoutResponse::logout_status() const {
  // @@protoc_insertion_point(field_get:audio_engine.LogoutResponse.logout_status)
  return logout_status_;
}
void LogoutResponse::set_logout_status(::google::protobuf::int64 value) {
  
  logout_status_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LogoutResponse.logout_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginNotify::kUserTokenFieldNumber;
const int LoginNotify::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginNotify::LoginNotify()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:audio_engine.LoginNotify)
}
LoginNotify::LoginNotify(const LoginNotify& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_token_, &from.user_token_,
    reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&user_token_) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:audio_engine.LoginNotify)
}

void LoginNotify::SharedCtor() {
  ::memset(&user_token_, 0, reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&user_token_) + sizeof(reason_));
  _cached_size_ = 0;
}

LoginNotify::~LoginNotify() {
  // @@protoc_insertion_point(destructor:audio_engine.LoginNotify)
  SharedDtor();
}

void LoginNotify::SharedDtor() {
}

void LoginNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginNotify& LoginNotify::default_instance() {
  protobuf_user_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginNotify* LoginNotify::New(::google::protobuf::Arena* arena) const {
  LoginNotify* n = new LoginNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:audio_engine.LoginNotify)
  ::memset(&user_token_, 0, reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&user_token_) + sizeof(reason_));
}

bool LoginNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:audio_engine.LoginNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:audio_engine.LoginNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:audio_engine.LoginNotify)
  return false;
#undef DO_
}

void LoginNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:audio_engine.LoginNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_token = 1;
  if (this->user_token() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_token(), output);
  }

  // int32 reason = 2;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:audio_engine.LoginNotify)
}

size_t LoginNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audio_engine.LoginNotify)
  size_t total_size = 0;

  // int64 user_token = 1;
  if (this->user_token() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_token());
  }

  // int32 reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginNotify*>(&from));
}

void LoginNotify::MergeFrom(const LoginNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:audio_engine.LoginNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_token() != 0) {
    set_user_token(from.user_token());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void LoginNotify::CopyFrom(const LoginNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audio_engine.LoginNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginNotify::IsInitialized() const {
  return true;
}

void LoginNotify::Swap(LoginNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginNotify::InternalSwap(LoginNotify* other) {
  std::swap(user_token_, other->user_token_);
  std::swap(reason_, other->reason_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LoginNotify::GetTypeName() const {
  return "audio_engine.LoginNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginNotify

// int64 user_token = 1;
void LoginNotify::clear_user_token() {
  user_token_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LoginNotify::user_token() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginNotify.user_token)
  return user_token_;
}
void LoginNotify::set_user_token(::google::protobuf::int64 value) {
  
  user_token_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LoginNotify.user_token)
}

// int32 reason = 2;
void LoginNotify::clear_reason() {
  reason_ = 0;
}
::google::protobuf::int32 LoginNotify::reason() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginNotify.reason)
  return reason_;
}
void LoginNotify::set_reason(::google::protobuf::int32 value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LoginNotify.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RAUserMessage::kCmdFieldNumber;
const int RAUserMessage::kLoginRequstFieldNumber;
const int RAUserMessage::kLoginResponseFieldNumber;
const int RAUserMessage::kLogoutRequstFieldNumber;
const int RAUserMessage::kLogoutResponseFieldNumber;
const int RAUserMessage::kLogoutNotifyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RAUserMessage::RAUserMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_user_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:audio_engine.RAUserMessage)
}
RAUserMessage::RAUserMessage(const RAUserMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_login_requst()) {
    login_requst_ = new ::audio_engine::LoginRequest(*from.login_requst_);
  } else {
    login_requst_ = NULL;
  }
  if (from.has_login_response()) {
    login_response_ = new ::audio_engine::LoginResponse(*from.login_response_);
  } else {
    login_response_ = NULL;
  }
  if (from.has_logout_requst()) {
    logout_requst_ = new ::audio_engine::LogoutRequst(*from.logout_requst_);
  } else {
    logout_requst_ = NULL;
  }
  if (from.has_logout_response()) {
    logout_response_ = new ::audio_engine::LogoutResponse(*from.logout_response_);
  } else {
    logout_response_ = NULL;
  }
  if (from.has_logout_notify()) {
    logout_notify_ = new ::audio_engine::LoginNotify(*from.logout_notify_);
  } else {
    logout_notify_ = NULL;
  }
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:audio_engine.RAUserMessage)
}

void RAUserMessage::SharedCtor() {
  ::memset(&login_requst_, 0, reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&login_requst_) + sizeof(cmd_));
  _cached_size_ = 0;
}

RAUserMessage::~RAUserMessage() {
  // @@protoc_insertion_point(destructor:audio_engine.RAUserMessage)
  SharedDtor();
}

void RAUserMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete login_requst_;
  }
  if (this != internal_default_instance()) {
    delete login_response_;
  }
  if (this != internal_default_instance()) {
    delete logout_requst_;
  }
  if (this != internal_default_instance()) {
    delete logout_response_;
  }
  if (this != internal_default_instance()) {
    delete logout_notify_;
  }
}

void RAUserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RAUserMessage& RAUserMessage::default_instance() {
  protobuf_user_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

RAUserMessage* RAUserMessage::New(::google::protobuf::Arena* arena) const {
  RAUserMessage* n = new RAUserMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RAUserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:audio_engine.RAUserMessage)
  if (GetArenaNoVirtual() == NULL && login_requst_ != NULL) {
    delete login_requst_;
  }
  login_requst_ = NULL;
  if (GetArenaNoVirtual() == NULL && login_response_ != NULL) {
    delete login_response_;
  }
  login_response_ = NULL;
  if (GetArenaNoVirtual() == NULL && logout_requst_ != NULL) {
    delete logout_requst_;
  }
  logout_requst_ = NULL;
  if (GetArenaNoVirtual() == NULL && logout_response_ != NULL) {
    delete logout_response_;
  }
  logout_response_ = NULL;
  if (GetArenaNoVirtual() == NULL && logout_notify_ != NULL) {
    delete logout_notify_;
  }
  logout_notify_ = NULL;
  cmd_ = 0;
}

bool RAUserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:audio_engine.RAUserMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .audio_engine.RAMSG cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd(static_cast< ::audio_engine::RAMSG >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .audio_engine.LoginRequest login_requst = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_requst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .audio_engine.LoginResponse login_response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .audio_engine.LogoutRequst logout_requst = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout_requst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .audio_engine.LogoutResponse logout_response = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .audio_engine.LoginNotify logout_notify = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout_notify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:audio_engine.RAUserMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:audio_engine.RAUserMessage)
  return false;
#undef DO_
}

void RAUserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:audio_engine.RAUserMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .audio_engine.RAMSG cmd = 1;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // .audio_engine.LoginRequest login_requst = 2;
  if (this->has_login_requst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->login_requst_, output);
  }

  // .audio_engine.LoginResponse login_response = 3;
  if (this->has_login_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->login_response_, output);
  }

  // .audio_engine.LogoutRequst logout_requst = 4;
  if (this->has_logout_requst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->logout_requst_, output);
  }

  // .audio_engine.LogoutResponse logout_response = 5;
  if (this->has_logout_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->logout_response_, output);
  }

  // .audio_engine.LoginNotify logout_notify = 6;
  if (this->has_logout_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->logout_notify_, output);
  }

  // @@protoc_insertion_point(serialize_end:audio_engine.RAUserMessage)
}

size_t RAUserMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:audio_engine.RAUserMessage)
  size_t total_size = 0;

  // .audio_engine.LoginRequest login_requst = 2;
  if (this->has_login_requst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->login_requst_);
  }

  // .audio_engine.LoginResponse login_response = 3;
  if (this->has_login_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->login_response_);
  }

  // .audio_engine.LogoutRequst logout_requst = 4;
  if (this->has_logout_requst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->logout_requst_);
  }

  // .audio_engine.LogoutResponse logout_response = 5;
  if (this->has_logout_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->logout_response_);
  }

  // .audio_engine.LoginNotify logout_notify = 6;
  if (this->has_logout_notify()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->logout_notify_);
  }

  // .audio_engine.RAMSG cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RAUserMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RAUserMessage*>(&from));
}

void RAUserMessage::MergeFrom(const RAUserMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:audio_engine.RAUserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_login_requst()) {
    mutable_login_requst()->::audio_engine::LoginRequest::MergeFrom(from.login_requst());
  }
  if (from.has_login_response()) {
    mutable_login_response()->::audio_engine::LoginResponse::MergeFrom(from.login_response());
  }
  if (from.has_logout_requst()) {
    mutable_logout_requst()->::audio_engine::LogoutRequst::MergeFrom(from.logout_requst());
  }
  if (from.has_logout_response()) {
    mutable_logout_response()->::audio_engine::LogoutResponse::MergeFrom(from.logout_response());
  }
  if (from.has_logout_notify()) {
    mutable_logout_notify()->::audio_engine::LoginNotify::MergeFrom(from.logout_notify());
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
}

void RAUserMessage::CopyFrom(const RAUserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:audio_engine.RAUserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RAUserMessage::IsInitialized() const {
  return true;
}

void RAUserMessage::Swap(RAUserMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RAUserMessage::InternalSwap(RAUserMessage* other) {
  std::swap(login_requst_, other->login_requst_);
  std::swap(login_response_, other->login_response_);
  std::swap(logout_requst_, other->logout_requst_);
  std::swap(logout_response_, other->logout_response_);
  std::swap(logout_notify_, other->logout_notify_);
  std::swap(cmd_, other->cmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RAUserMessage::GetTypeName() const {
  return "audio_engine.RAUserMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RAUserMessage

// .audio_engine.RAMSG cmd = 1;
void RAUserMessage::clear_cmd() {
  cmd_ = 0;
}
::audio_engine::RAMSG RAUserMessage::cmd() const {
  // @@protoc_insertion_point(field_get:audio_engine.RAUserMessage.cmd)
  return static_cast< ::audio_engine::RAMSG >(cmd_);
}
void RAUserMessage::set_cmd(::audio_engine::RAMSG value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.RAUserMessage.cmd)
}

// .audio_engine.LoginRequest login_requst = 2;
bool RAUserMessage::has_login_requst() const {
  return this != internal_default_instance() && login_requst_ != NULL;
}
void RAUserMessage::clear_login_requst() {
  if (GetArenaNoVirtual() == NULL && login_requst_ != NULL) delete login_requst_;
  login_requst_ = NULL;
}
const ::audio_engine::LoginRequest& RAUserMessage::login_requst() const {
  // @@protoc_insertion_point(field_get:audio_engine.RAUserMessage.login_requst)
  return login_requst_ != NULL ? *login_requst_
                         : *::audio_engine::LoginRequest::internal_default_instance();
}
::audio_engine::LoginRequest* RAUserMessage::mutable_login_requst() {
  
  if (login_requst_ == NULL) {
    login_requst_ = new ::audio_engine::LoginRequest;
  }
  // @@protoc_insertion_point(field_mutable:audio_engine.RAUserMessage.login_requst)
  return login_requst_;
}
::audio_engine::LoginRequest* RAUserMessage::release_login_requst() {
  // @@protoc_insertion_point(field_release:audio_engine.RAUserMessage.login_requst)
  
  ::audio_engine::LoginRequest* temp = login_requst_;
  login_requst_ = NULL;
  return temp;
}
void RAUserMessage::set_allocated_login_requst(::audio_engine::LoginRequest* login_requst) {
  delete login_requst_;
  login_requst_ = login_requst;
  if (login_requst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:audio_engine.RAUserMessage.login_requst)
}

// .audio_engine.LoginResponse login_response = 3;
bool RAUserMessage::has_login_response() const {
  return this != internal_default_instance() && login_response_ != NULL;
}
void RAUserMessage::clear_login_response() {
  if (GetArenaNoVirtual() == NULL && login_response_ != NULL) delete login_response_;
  login_response_ = NULL;
}
const ::audio_engine::LoginResponse& RAUserMessage::login_response() const {
  // @@protoc_insertion_point(field_get:audio_engine.RAUserMessage.login_response)
  return login_response_ != NULL ? *login_response_
                         : *::audio_engine::LoginResponse::internal_default_instance();
}
::audio_engine::LoginResponse* RAUserMessage::mutable_login_response() {
  
  if (login_response_ == NULL) {
    login_response_ = new ::audio_engine::LoginResponse;
  }
  // @@protoc_insertion_point(field_mutable:audio_engine.RAUserMessage.login_response)
  return login_response_;
}
::audio_engine::LoginResponse* RAUserMessage::release_login_response() {
  // @@protoc_insertion_point(field_release:audio_engine.RAUserMessage.login_response)
  
  ::audio_engine::LoginResponse* temp = login_response_;
  login_response_ = NULL;
  return temp;
}
void RAUserMessage::set_allocated_login_response(::audio_engine::LoginResponse* login_response) {
  delete login_response_;
  login_response_ = login_response;
  if (login_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:audio_engine.RAUserMessage.login_response)
}

// .audio_engine.LogoutRequst logout_requst = 4;
bool RAUserMessage::has_logout_requst() const {
  return this != internal_default_instance() && logout_requst_ != NULL;
}
void RAUserMessage::clear_logout_requst() {
  if (GetArenaNoVirtual() == NULL && logout_requst_ != NULL) delete logout_requst_;
  logout_requst_ = NULL;
}
const ::audio_engine::LogoutRequst& RAUserMessage::logout_requst() const {
  // @@protoc_insertion_point(field_get:audio_engine.RAUserMessage.logout_requst)
  return logout_requst_ != NULL ? *logout_requst_
                         : *::audio_engine::LogoutRequst::internal_default_instance();
}
::audio_engine::LogoutRequst* RAUserMessage::mutable_logout_requst() {
  
  if (logout_requst_ == NULL) {
    logout_requst_ = new ::audio_engine::LogoutRequst;
  }
  // @@protoc_insertion_point(field_mutable:audio_engine.RAUserMessage.logout_requst)
  return logout_requst_;
}
::audio_engine::LogoutRequst* RAUserMessage::release_logout_requst() {
  // @@protoc_insertion_point(field_release:audio_engine.RAUserMessage.logout_requst)
  
  ::audio_engine::LogoutRequst* temp = logout_requst_;
  logout_requst_ = NULL;
  return temp;
}
void RAUserMessage::set_allocated_logout_requst(::audio_engine::LogoutRequst* logout_requst) {
  delete logout_requst_;
  logout_requst_ = logout_requst;
  if (logout_requst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:audio_engine.RAUserMessage.logout_requst)
}

// .audio_engine.LogoutResponse logout_response = 5;
bool RAUserMessage::has_logout_response() const {
  return this != internal_default_instance() && logout_response_ != NULL;
}
void RAUserMessage::clear_logout_response() {
  if (GetArenaNoVirtual() == NULL && logout_response_ != NULL) delete logout_response_;
  logout_response_ = NULL;
}
const ::audio_engine::LogoutResponse& RAUserMessage::logout_response() const {
  // @@protoc_insertion_point(field_get:audio_engine.RAUserMessage.logout_response)
  return logout_response_ != NULL ? *logout_response_
                         : *::audio_engine::LogoutResponse::internal_default_instance();
}
::audio_engine::LogoutResponse* RAUserMessage::mutable_logout_response() {
  
  if (logout_response_ == NULL) {
    logout_response_ = new ::audio_engine::LogoutResponse;
  }
  // @@protoc_insertion_point(field_mutable:audio_engine.RAUserMessage.logout_response)
  return logout_response_;
}
::audio_engine::LogoutResponse* RAUserMessage::release_logout_response() {
  // @@protoc_insertion_point(field_release:audio_engine.RAUserMessage.logout_response)
  
  ::audio_engine::LogoutResponse* temp = logout_response_;
  logout_response_ = NULL;
  return temp;
}
void RAUserMessage::set_allocated_logout_response(::audio_engine::LogoutResponse* logout_response) {
  delete logout_response_;
  logout_response_ = logout_response;
  if (logout_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:audio_engine.RAUserMessage.logout_response)
}

// .audio_engine.LoginNotify logout_notify = 6;
bool RAUserMessage::has_logout_notify() const {
  return this != internal_default_instance() && logout_notify_ != NULL;
}
void RAUserMessage::clear_logout_notify() {
  if (GetArenaNoVirtual() == NULL && logout_notify_ != NULL) delete logout_notify_;
  logout_notify_ = NULL;
}
const ::audio_engine::LoginNotify& RAUserMessage::logout_notify() const {
  // @@protoc_insertion_point(field_get:audio_engine.RAUserMessage.logout_notify)
  return logout_notify_ != NULL ? *logout_notify_
                         : *::audio_engine::LoginNotify::internal_default_instance();
}
::audio_engine::LoginNotify* RAUserMessage::mutable_logout_notify() {
  
  if (logout_notify_ == NULL) {
    logout_notify_ = new ::audio_engine::LoginNotify;
  }
  // @@protoc_insertion_point(field_mutable:audio_engine.RAUserMessage.logout_notify)
  return logout_notify_;
}
::audio_engine::LoginNotify* RAUserMessage::release_logout_notify() {
  // @@protoc_insertion_point(field_release:audio_engine.RAUserMessage.logout_notify)
  
  ::audio_engine::LoginNotify* temp = logout_notify_;
  logout_notify_ = NULL;
  return temp;
}
void RAUserMessage::set_allocated_logout_notify(::audio_engine::LoginNotify* logout_notify) {
  delete logout_notify_;
  logout_notify_ = logout_notify;
  if (logout_notify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:audio_engine.RAUserMessage.logout_notify)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace audio_engine

// @@protoc_insertion_point(global_scope)
