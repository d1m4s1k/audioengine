// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_service.proto

#ifndef PROTOBUF_user_5fservice_2eproto__INCLUDED
#define PROTOBUF_user_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace audio_engine {
class LoginNotify;
class LoginNotifyDefaultTypeInternal;
extern LoginNotifyDefaultTypeInternal _LoginNotify_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LogoutRequst;
class LogoutRequstDefaultTypeInternal;
extern LogoutRequstDefaultTypeInternal _LogoutRequst_default_instance_;
class LogoutResponse;
class LogoutResponseDefaultTypeInternal;
extern LogoutResponseDefaultTypeInternal _LogoutResponse_default_instance_;
class RAUserMessage;
class RAUserMessageDefaultTypeInternal;
extern RAUserMessageDefaultTypeInternal _RAUserMessage_default_instance_;
}  // namespace audio_engine

namespace audio_engine {

namespace protobuf_user_5fservice_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_user_5fservice_2eproto

enum RAMSG {
  Invalid = 0,
  Login_Request = 257,
  Login_Response = 258,
  Logout_Request = 259,
  Logout_Response = 260,
  Logout_Notify = 261,
  RAMSG_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RAMSG_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RAMSG_IsValid(int value);
const RAMSG RAMSG_MIN = Invalid;
const RAMSG RAMSG_MAX = Logout_Notify;
const int RAMSG_ARRAYSIZE = RAMSG_MAX + 1;

enum DEVICE_TYPE {
  DEVICE_UNKNOWN = 0,
  DEVICE_WINDOWS = 1,
  DEVICE_ANDROID = 2,
  DEVICE_IOS = 3,
  DEVICE_LINUX = 4,
  DEVICE_WEB = 8,
  DEVICE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DEVICE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DEVICE_TYPE_IsValid(int value);
const DEVICE_TYPE DEVICE_TYPE_MIN = DEVICE_UNKNOWN;
const DEVICE_TYPE DEVICE_TYPE_MAX = DEVICE_WEB;
const int DEVICE_TYPE_ARRAYSIZE = DEVICE_TYPE_MAX + 1;

// ===================================================================

class LoginRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:audio_engine.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LoginRequest& default_instance();

  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LoginRequest* other);
  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string extends = 4;
  void clear_extends();
  static const int kExtendsFieldNumber = 4;
  const ::std::string& extends() const;
  void set_extends(const ::std::string& value);
  #if LANG_CXX11
  void set_extends(::std::string&& value);
  #endif
  void set_extends(const char* value);
  void set_extends(const char* value, size_t size);
  ::std::string* mutable_extends();
  ::std::string* release_extends();
  void set_allocated_extends(::std::string* extends);

  // .audio_engine.DEVICE_TYPE devtype = 3;
  void clear_devtype();
  static const int kDevtypeFieldNumber = 3;
  ::audio_engine::DEVICE_TYPE devtype() const;
  void set_devtype(::audio_engine::DEVICE_TYPE value);

  // @@protoc_insertion_point(class_scope:audio_engine.LoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr extends_;
  int devtype_;
  mutable int _cached_size_;
  friend struct protobuf_user_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:audio_engine.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LoginResponse& default_instance();

  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LoginResponse* other);
  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // int64 token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  ::google::protobuf::int64 token() const;
  void set_token(::google::protobuf::int64 value);

  // int32 result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:audio_engine.LoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 token_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend struct protobuf_user_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutRequst : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:audio_engine.LogoutRequst) */ {
 public:
  LogoutRequst();
  virtual ~LogoutRequst();

  LogoutRequst(const LogoutRequst& from);

  inline LogoutRequst& operator=(const LogoutRequst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutRequst(LogoutRequst&& from) noexcept
    : LogoutRequst() {
    *this = ::std::move(from);
  }

  inline LogoutRequst& operator=(LogoutRequst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LogoutRequst& default_instance();

  static inline const LogoutRequst* internal_default_instance() {
    return reinterpret_cast<const LogoutRequst*>(
               &_LogoutRequst_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LogoutRequst* other);
  friend void swap(LogoutRequst& a, LogoutRequst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutRequst* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutRequst* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LogoutRequst& from);
  void MergeFrom(const LogoutRequst& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogoutRequst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  ::google::protobuf::int64 token() const;
  void set_token(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:audio_engine.LogoutRequst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 token_;
  mutable int _cached_size_;
  friend struct protobuf_user_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:audio_engine.LogoutResponse) */ {
 public:
  LogoutResponse();
  virtual ~LogoutResponse();

  LogoutResponse(const LogoutResponse& from);

  inline LogoutResponse& operator=(const LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutResponse(LogoutResponse&& from) noexcept
    : LogoutResponse() {
    *this = ::std::move(from);
  }

  inline LogoutResponse& operator=(LogoutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LogoutResponse& default_instance();

  static inline const LogoutResponse* internal_default_instance() {
    return reinterpret_cast<const LogoutResponse*>(
               &_LogoutResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LogoutResponse* other);
  friend void swap(LogoutResponse& a, LogoutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LogoutResponse& from);
  void MergeFrom(const LogoutResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogoutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  ::google::protobuf::int64 token() const;
  void set_token(::google::protobuf::int64 value);

  // int64 status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::protobuf::int64 status() const;
  void set_status(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:audio_engine.LogoutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 token_;
  ::google::protobuf::int64 status_;
  mutable int _cached_size_;
  friend struct protobuf_user_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginNotify : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:audio_engine.LoginNotify) */ {
 public:
  LoginNotify();
  virtual ~LoginNotify();

  LoginNotify(const LoginNotify& from);

  inline LoginNotify& operator=(const LoginNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginNotify(LoginNotify&& from) noexcept
    : LoginNotify() {
    *this = ::std::move(from);
  }

  inline LoginNotify& operator=(LoginNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LoginNotify& default_instance();

  static inline const LoginNotify* internal_default_instance() {
    return reinterpret_cast<const LoginNotify*>(
               &_LoginNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(LoginNotify* other);
  friend void swap(LoginNotify& a, LoginNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LoginNotify& from);
  void MergeFrom(const LoginNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string extend = 3;
  void clear_extend();
  static const int kExtendFieldNumber = 3;
  const ::std::string& extend() const;
  void set_extend(const ::std::string& value);
  #if LANG_CXX11
  void set_extend(::std::string&& value);
  #endif
  void set_extend(const char* value);
  void set_extend(const char* value, size_t size);
  ::std::string* mutable_extend();
  ::std::string* release_extend();
  void set_allocated_extend(::std::string* extend);

  // .audio_engine.DEVICE_TYPE devtype = 4;
  void clear_devtype();
  static const int kDevtypeFieldNumber = 4;
  ::audio_engine::DEVICE_TYPE devtype() const;
  void set_devtype(::audio_engine::DEVICE_TYPE value);

  // int32 status = 5;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:audio_engine.LoginNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr extend_;
  int devtype_;
  ::google::protobuf::int32 status_;
  mutable int _cached_size_;
  friend struct protobuf_user_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RAUserMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:audio_engine.RAUserMessage) */ {
 public:
  RAUserMessage();
  virtual ~RAUserMessage();

  RAUserMessage(const RAUserMessage& from);

  inline RAUserMessage& operator=(const RAUserMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RAUserMessage(RAUserMessage&& from) noexcept
    : RAUserMessage() {
    *this = ::std::move(from);
  }

  inline RAUserMessage& operator=(RAUserMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RAUserMessage& default_instance();

  static inline const RAUserMessage* internal_default_instance() {
    return reinterpret_cast<const RAUserMessage*>(
               &_RAUserMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RAUserMessage* other);
  friend void swap(RAUserMessage& a, RAUserMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RAUserMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  RAUserMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RAUserMessage& from);
  void MergeFrom(const RAUserMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RAUserMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .audio_engine.LoginRequest login_requst = 2;
  bool has_login_requst() const;
  void clear_login_requst();
  static const int kLoginRequstFieldNumber = 2;
  const ::audio_engine::LoginRequest& login_requst() const;
  ::audio_engine::LoginRequest* mutable_login_requst();
  ::audio_engine::LoginRequest* release_login_requst();
  void set_allocated_login_requst(::audio_engine::LoginRequest* login_requst);

  // .audio_engine.LoginResponse login_response = 3;
  bool has_login_response() const;
  void clear_login_response();
  static const int kLoginResponseFieldNumber = 3;
  const ::audio_engine::LoginResponse& login_response() const;
  ::audio_engine::LoginResponse* mutable_login_response();
  ::audio_engine::LoginResponse* release_login_response();
  void set_allocated_login_response(::audio_engine::LoginResponse* login_response);

  // .audio_engine.LogoutRequst logout_requst = 4;
  bool has_logout_requst() const;
  void clear_logout_requst();
  static const int kLogoutRequstFieldNumber = 4;
  const ::audio_engine::LogoutRequst& logout_requst() const;
  ::audio_engine::LogoutRequst* mutable_logout_requst();
  ::audio_engine::LogoutRequst* release_logout_requst();
  void set_allocated_logout_requst(::audio_engine::LogoutRequst* logout_requst);

  // .audio_engine.LogoutResponse logout_response = 5;
  bool has_logout_response() const;
  void clear_logout_response();
  static const int kLogoutResponseFieldNumber = 5;
  const ::audio_engine::LogoutResponse& logout_response() const;
  ::audio_engine::LogoutResponse* mutable_logout_response();
  ::audio_engine::LogoutResponse* release_logout_response();
  void set_allocated_logout_response(::audio_engine::LogoutResponse* logout_response);

  // .audio_engine.LoginNotify login_notify = 6;
  bool has_login_notify() const;
  void clear_login_notify();
  static const int kLoginNotifyFieldNumber = 6;
  const ::audio_engine::LoginNotify& login_notify() const;
  ::audio_engine::LoginNotify* mutable_login_notify();
  ::audio_engine::LoginNotify* release_login_notify();
  void set_allocated_login_notify(::audio_engine::LoginNotify* login_notify);

  // .audio_engine.RAMSG cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::audio_engine::RAMSG cmd() const;
  void set_cmd(::audio_engine::RAMSG value);

  // @@protoc_insertion_point(class_scope:audio_engine.RAUserMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::audio_engine::LoginRequest* login_requst_;
  ::audio_engine::LoginResponse* login_response_;
  ::audio_engine::LogoutRequst* logout_requst_;
  ::audio_engine::LogoutResponse* logout_response_;
  ::audio_engine::LoginNotify* login_notify_;
  int cmd_;
  mutable int _cached_size_;
  friend struct protobuf_user_5fservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequest

// string userid = 1;
inline void LoginRequest::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::userid() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginRequest.userid)
  return userid_.GetNoArena();
}
inline void LoginRequest::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audio_engine.LoginRequest.userid)
}
#if LANG_CXX11
inline void LoginRequest::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:audio_engine.LoginRequest.userid)
}
#endif
inline void LoginRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audio_engine.LoginRequest.userid)
}
inline void LoginRequest::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audio_engine.LoginRequest.userid)
}
inline ::std::string* LoginRequest::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:audio_engine.LoginRequest.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_userid() {
  // @@protoc_insertion_point(field_release:audio_engine.LoginRequest.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:audio_engine.LoginRequest.userid)
}

// string username = 2;
inline void LoginRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginRequest.username)
  return username_.GetNoArena();
}
inline void LoginRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audio_engine.LoginRequest.username)
}
#if LANG_CXX11
inline void LoginRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:audio_engine.LoginRequest.username)
}
#endif
inline void LoginRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audio_engine.LoginRequest.username)
}
inline void LoginRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audio_engine.LoginRequest.username)
}
inline ::std::string* LoginRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:audio_engine.LoginRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:audio_engine.LoginRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:audio_engine.LoginRequest.username)
}

// .audio_engine.DEVICE_TYPE devtype = 3;
inline void LoginRequest::clear_devtype() {
  devtype_ = 0;
}
inline ::audio_engine::DEVICE_TYPE LoginRequest::devtype() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginRequest.devtype)
  return static_cast< ::audio_engine::DEVICE_TYPE >(devtype_);
}
inline void LoginRequest::set_devtype(::audio_engine::DEVICE_TYPE value) {
  
  devtype_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LoginRequest.devtype)
}

// string extends = 4;
inline void LoginRequest::clear_extends() {
  extends_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::extends() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginRequest.extends)
  return extends_.GetNoArena();
}
inline void LoginRequest::set_extends(const ::std::string& value) {
  
  extends_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audio_engine.LoginRequest.extends)
}
#if LANG_CXX11
inline void LoginRequest::set_extends(::std::string&& value) {
  
  extends_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:audio_engine.LoginRequest.extends)
}
#endif
inline void LoginRequest::set_extends(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extends_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audio_engine.LoginRequest.extends)
}
inline void LoginRequest::set_extends(const char* value, size_t size) {
  
  extends_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audio_engine.LoginRequest.extends)
}
inline ::std::string* LoginRequest::mutable_extends() {
  
  // @@protoc_insertion_point(field_mutable:audio_engine.LoginRequest.extends)
  return extends_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_extends() {
  // @@protoc_insertion_point(field_release:audio_engine.LoginRequest.extends)
  
  return extends_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_extends(::std::string* extends) {
  if (extends != NULL) {
    
  } else {
    
  }
  extends_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extends);
  // @@protoc_insertion_point(field_set_allocated:audio_engine.LoginRequest.extends)
}

// -------------------------------------------------------------------

// LoginResponse

// string userid = 1;
inline void LoginResponse::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginResponse::userid() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginResponse.userid)
  return userid_.GetNoArena();
}
inline void LoginResponse::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audio_engine.LoginResponse.userid)
}
#if LANG_CXX11
inline void LoginResponse::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:audio_engine.LoginResponse.userid)
}
#endif
inline void LoginResponse::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audio_engine.LoginResponse.userid)
}
inline void LoginResponse::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audio_engine.LoginResponse.userid)
}
inline ::std::string* LoginResponse::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:audio_engine.LoginResponse.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResponse::release_userid() {
  // @@protoc_insertion_point(field_release:audio_engine.LoginResponse.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:audio_engine.LoginResponse.userid)
}

// int32 result = 2;
inline void LoginResponse::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginResponse.result)
  return result_;
}
inline void LoginResponse::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LoginResponse.result)
}

// int64 token = 3;
inline void LoginResponse::clear_token() {
  token_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LoginResponse::token() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginResponse.token)
  return token_;
}
inline void LoginResponse::set_token(::google::protobuf::int64 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LoginResponse.token)
}

// -------------------------------------------------------------------

// LogoutRequst

// int64 token = 1;
inline void LogoutRequst::clear_token() {
  token_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LogoutRequst::token() const {
  // @@protoc_insertion_point(field_get:audio_engine.LogoutRequst.token)
  return token_;
}
inline void LogoutRequst::set_token(::google::protobuf::int64 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LogoutRequst.token)
}

// -------------------------------------------------------------------

// LogoutResponse

// int64 token = 1;
inline void LogoutResponse::clear_token() {
  token_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LogoutResponse::token() const {
  // @@protoc_insertion_point(field_get:audio_engine.LogoutResponse.token)
  return token_;
}
inline void LogoutResponse::set_token(::google::protobuf::int64 value) {
  
  token_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LogoutResponse.token)
}

// int64 status = 2;
inline void LogoutResponse::clear_status() {
  status_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LogoutResponse::status() const {
  // @@protoc_insertion_point(field_get:audio_engine.LogoutResponse.status)
  return status_;
}
inline void LogoutResponse::set_status(::google::protobuf::int64 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LogoutResponse.status)
}

// -------------------------------------------------------------------

// LoginNotify

// string userid = 1;
inline void LoginNotify::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginNotify::userid() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginNotify.userid)
  return userid_.GetNoArena();
}
inline void LoginNotify::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audio_engine.LoginNotify.userid)
}
#if LANG_CXX11
inline void LoginNotify::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:audio_engine.LoginNotify.userid)
}
#endif
inline void LoginNotify::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audio_engine.LoginNotify.userid)
}
inline void LoginNotify::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audio_engine.LoginNotify.userid)
}
inline ::std::string* LoginNotify::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:audio_engine.LoginNotify.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginNotify::release_userid() {
  // @@protoc_insertion_point(field_release:audio_engine.LoginNotify.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginNotify::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:audio_engine.LoginNotify.userid)
}

// string username = 2;
inline void LoginNotify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginNotify::username() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginNotify.username)
  return username_.GetNoArena();
}
inline void LoginNotify::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audio_engine.LoginNotify.username)
}
#if LANG_CXX11
inline void LoginNotify::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:audio_engine.LoginNotify.username)
}
#endif
inline void LoginNotify::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audio_engine.LoginNotify.username)
}
inline void LoginNotify::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audio_engine.LoginNotify.username)
}
inline ::std::string* LoginNotify::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:audio_engine.LoginNotify.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginNotify::release_username() {
  // @@protoc_insertion_point(field_release:audio_engine.LoginNotify.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginNotify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:audio_engine.LoginNotify.username)
}

// string extend = 3;
inline void LoginNotify::clear_extend() {
  extend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginNotify::extend() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginNotify.extend)
  return extend_.GetNoArena();
}
inline void LoginNotify::set_extend(const ::std::string& value) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:audio_engine.LoginNotify.extend)
}
#if LANG_CXX11
inline void LoginNotify::set_extend(::std::string&& value) {
  
  extend_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:audio_engine.LoginNotify.extend)
}
#endif
inline void LoginNotify::set_extend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:audio_engine.LoginNotify.extend)
}
inline void LoginNotify::set_extend(const char* value, size_t size) {
  
  extend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:audio_engine.LoginNotify.extend)
}
inline ::std::string* LoginNotify::mutable_extend() {
  
  // @@protoc_insertion_point(field_mutable:audio_engine.LoginNotify.extend)
  return extend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginNotify::release_extend() {
  // @@protoc_insertion_point(field_release:audio_engine.LoginNotify.extend)
  
  return extend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginNotify::set_allocated_extend(::std::string* extend) {
  if (extend != NULL) {
    
  } else {
    
  }
  extend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend);
  // @@protoc_insertion_point(field_set_allocated:audio_engine.LoginNotify.extend)
}

// .audio_engine.DEVICE_TYPE devtype = 4;
inline void LoginNotify::clear_devtype() {
  devtype_ = 0;
}
inline ::audio_engine::DEVICE_TYPE LoginNotify::devtype() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginNotify.devtype)
  return static_cast< ::audio_engine::DEVICE_TYPE >(devtype_);
}
inline void LoginNotify::set_devtype(::audio_engine::DEVICE_TYPE value) {
  
  devtype_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LoginNotify.devtype)
}

// int32 status = 5;
inline void LoginNotify::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 LoginNotify::status() const {
  // @@protoc_insertion_point(field_get:audio_engine.LoginNotify.status)
  return status_;
}
inline void LoginNotify::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.LoginNotify.status)
}

// -------------------------------------------------------------------

// RAUserMessage

// .audio_engine.RAMSG cmd = 1;
inline void RAUserMessage::clear_cmd() {
  cmd_ = 0;
}
inline ::audio_engine::RAMSG RAUserMessage::cmd() const {
  // @@protoc_insertion_point(field_get:audio_engine.RAUserMessage.cmd)
  return static_cast< ::audio_engine::RAMSG >(cmd_);
}
inline void RAUserMessage::set_cmd(::audio_engine::RAMSG value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:audio_engine.RAUserMessage.cmd)
}

// .audio_engine.LoginRequest login_requst = 2;
inline bool RAUserMessage::has_login_requst() const {
  return this != internal_default_instance() && login_requst_ != NULL;
}
inline void RAUserMessage::clear_login_requst() {
  if (GetArenaNoVirtual() == NULL && login_requst_ != NULL) delete login_requst_;
  login_requst_ = NULL;
}
inline const ::audio_engine::LoginRequest& RAUserMessage::login_requst() const {
  const ::audio_engine::LoginRequest* p = login_requst_;
  // @@protoc_insertion_point(field_get:audio_engine.RAUserMessage.login_requst)
  return p != NULL ? *p : *reinterpret_cast<const ::audio_engine::LoginRequest*>(
      &::audio_engine::_LoginRequest_default_instance_);
}
inline ::audio_engine::LoginRequest* RAUserMessage::mutable_login_requst() {
  
  if (login_requst_ == NULL) {
    login_requst_ = new ::audio_engine::LoginRequest;
  }
  // @@protoc_insertion_point(field_mutable:audio_engine.RAUserMessage.login_requst)
  return login_requst_;
}
inline ::audio_engine::LoginRequest* RAUserMessage::release_login_requst() {
  // @@protoc_insertion_point(field_release:audio_engine.RAUserMessage.login_requst)
  
  ::audio_engine::LoginRequest* temp = login_requst_;
  login_requst_ = NULL;
  return temp;
}
inline void RAUserMessage::set_allocated_login_requst(::audio_engine::LoginRequest* login_requst) {
  delete login_requst_;
  login_requst_ = login_requst;
  if (login_requst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:audio_engine.RAUserMessage.login_requst)
}

// .audio_engine.LoginResponse login_response = 3;
inline bool RAUserMessage::has_login_response() const {
  return this != internal_default_instance() && login_response_ != NULL;
}
inline void RAUserMessage::clear_login_response() {
  if (GetArenaNoVirtual() == NULL && login_response_ != NULL) delete login_response_;
  login_response_ = NULL;
}
inline const ::audio_engine::LoginResponse& RAUserMessage::login_response() const {
  const ::audio_engine::LoginResponse* p = login_response_;
  // @@protoc_insertion_point(field_get:audio_engine.RAUserMessage.login_response)
  return p != NULL ? *p : *reinterpret_cast<const ::audio_engine::LoginResponse*>(
      &::audio_engine::_LoginResponse_default_instance_);
}
inline ::audio_engine::LoginResponse* RAUserMessage::mutable_login_response() {
  
  if (login_response_ == NULL) {
    login_response_ = new ::audio_engine::LoginResponse;
  }
  // @@protoc_insertion_point(field_mutable:audio_engine.RAUserMessage.login_response)
  return login_response_;
}
inline ::audio_engine::LoginResponse* RAUserMessage::release_login_response() {
  // @@protoc_insertion_point(field_release:audio_engine.RAUserMessage.login_response)
  
  ::audio_engine::LoginResponse* temp = login_response_;
  login_response_ = NULL;
  return temp;
}
inline void RAUserMessage::set_allocated_login_response(::audio_engine::LoginResponse* login_response) {
  delete login_response_;
  login_response_ = login_response;
  if (login_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:audio_engine.RAUserMessage.login_response)
}

// .audio_engine.LogoutRequst logout_requst = 4;
inline bool RAUserMessage::has_logout_requst() const {
  return this != internal_default_instance() && logout_requst_ != NULL;
}
inline void RAUserMessage::clear_logout_requst() {
  if (GetArenaNoVirtual() == NULL && logout_requst_ != NULL) delete logout_requst_;
  logout_requst_ = NULL;
}
inline const ::audio_engine::LogoutRequst& RAUserMessage::logout_requst() const {
  const ::audio_engine::LogoutRequst* p = logout_requst_;
  // @@protoc_insertion_point(field_get:audio_engine.RAUserMessage.logout_requst)
  return p != NULL ? *p : *reinterpret_cast<const ::audio_engine::LogoutRequst*>(
      &::audio_engine::_LogoutRequst_default_instance_);
}
inline ::audio_engine::LogoutRequst* RAUserMessage::mutable_logout_requst() {
  
  if (logout_requst_ == NULL) {
    logout_requst_ = new ::audio_engine::LogoutRequst;
  }
  // @@protoc_insertion_point(field_mutable:audio_engine.RAUserMessage.logout_requst)
  return logout_requst_;
}
inline ::audio_engine::LogoutRequst* RAUserMessage::release_logout_requst() {
  // @@protoc_insertion_point(field_release:audio_engine.RAUserMessage.logout_requst)
  
  ::audio_engine::LogoutRequst* temp = logout_requst_;
  logout_requst_ = NULL;
  return temp;
}
inline void RAUserMessage::set_allocated_logout_requst(::audio_engine::LogoutRequst* logout_requst) {
  delete logout_requst_;
  logout_requst_ = logout_requst;
  if (logout_requst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:audio_engine.RAUserMessage.logout_requst)
}

// .audio_engine.LogoutResponse logout_response = 5;
inline bool RAUserMessage::has_logout_response() const {
  return this != internal_default_instance() && logout_response_ != NULL;
}
inline void RAUserMessage::clear_logout_response() {
  if (GetArenaNoVirtual() == NULL && logout_response_ != NULL) delete logout_response_;
  logout_response_ = NULL;
}
inline const ::audio_engine::LogoutResponse& RAUserMessage::logout_response() const {
  const ::audio_engine::LogoutResponse* p = logout_response_;
  // @@protoc_insertion_point(field_get:audio_engine.RAUserMessage.logout_response)
  return p != NULL ? *p : *reinterpret_cast<const ::audio_engine::LogoutResponse*>(
      &::audio_engine::_LogoutResponse_default_instance_);
}
inline ::audio_engine::LogoutResponse* RAUserMessage::mutable_logout_response() {
  
  if (logout_response_ == NULL) {
    logout_response_ = new ::audio_engine::LogoutResponse;
  }
  // @@protoc_insertion_point(field_mutable:audio_engine.RAUserMessage.logout_response)
  return logout_response_;
}
inline ::audio_engine::LogoutResponse* RAUserMessage::release_logout_response() {
  // @@protoc_insertion_point(field_release:audio_engine.RAUserMessage.logout_response)
  
  ::audio_engine::LogoutResponse* temp = logout_response_;
  logout_response_ = NULL;
  return temp;
}
inline void RAUserMessage::set_allocated_logout_response(::audio_engine::LogoutResponse* logout_response) {
  delete logout_response_;
  logout_response_ = logout_response;
  if (logout_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:audio_engine.RAUserMessage.logout_response)
}

// .audio_engine.LoginNotify login_notify = 6;
inline bool RAUserMessage::has_login_notify() const {
  return this != internal_default_instance() && login_notify_ != NULL;
}
inline void RAUserMessage::clear_login_notify() {
  if (GetArenaNoVirtual() == NULL && login_notify_ != NULL) delete login_notify_;
  login_notify_ = NULL;
}
inline const ::audio_engine::LoginNotify& RAUserMessage::login_notify() const {
  const ::audio_engine::LoginNotify* p = login_notify_;
  // @@protoc_insertion_point(field_get:audio_engine.RAUserMessage.login_notify)
  return p != NULL ? *p : *reinterpret_cast<const ::audio_engine::LoginNotify*>(
      &::audio_engine::_LoginNotify_default_instance_);
}
inline ::audio_engine::LoginNotify* RAUserMessage::mutable_login_notify() {
  
  if (login_notify_ == NULL) {
    login_notify_ = new ::audio_engine::LoginNotify;
  }
  // @@protoc_insertion_point(field_mutable:audio_engine.RAUserMessage.login_notify)
  return login_notify_;
}
inline ::audio_engine::LoginNotify* RAUserMessage::release_login_notify() {
  // @@protoc_insertion_point(field_release:audio_engine.RAUserMessage.login_notify)
  
  ::audio_engine::LoginNotify* temp = login_notify_;
  login_notify_ = NULL;
  return temp;
}
inline void RAUserMessage::set_allocated_login_notify(::audio_engine::LoginNotify* login_notify) {
  delete login_notify_;
  login_notify_ = login_notify;
  if (login_notify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:audio_engine.RAUserMessage.login_notify)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace audio_engine

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::audio_engine::RAMSG> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::audio_engine::DEVICE_TYPE> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_5fservice_2eproto__INCLUDED
