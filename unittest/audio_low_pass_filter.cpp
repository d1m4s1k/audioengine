#include "audio_low_pass_filter.h"
#include "stdio.h"
#include "math.h"
/*系数通过以下matlab程序生成，如果需要新的低通或者高通滤波器系数，可以自己重新调整参数生成
Fs=8000;fpl=10;fpu=1500;%对于采样率为16000的数据，他的频率最高为8000
N=40;%要处理的阶数，越高越精确，但是消耗cpu也越高，可以根据实际需要进行权衡
wc=[fpl/Fs,fpu/Fs];%带通频率范围
hn=fir1(N-1,wc,hanning(N));%hn这就是所求系数，窗函数采用汉宁窗，根据需要可以采用其他窗函数
% 以下是用来测试的代码
将代码保存为SpectrumAnalyze.m 然后传入文件名,和hn系数
function [f, len]=SpectrumAnalyze(filename,hn)
[data,fs]=audioread(filename);
sigLength = length(data);
len = sigLength;
t=(0:sigLength-1)/fs;
%x=sin(2*pi*f1*t)+sin(2*pi*f2*t);
x=data;
y=filter(hn,1,x);
figure;
subplot(2,1,1);
plot(t,x);
title('input x(t)');
xlabel('t/s');
ylabel('x(t)');

subplot(2,1,2);
plot(t,y);
title('ouyput y(t)');
xlabel('t/s');
ylabel('y(t)');

Y = fft(y,sigLength);
Pyy = Y.* conj(Y) / sigLength;%振幅
halflength=floor(sigLength/2);
f=Fs*(0:halflength)/sigLength;
figure;plot(f,Pyy(1:halflength+1));xlabel('Frequency(Hz)');legend('rec-pro');
*/

float low_pass_filter_10_1500[40] = { -5.95410478512873e-05, -0.000351170884883739, -0.000998539719042849, -0.00202173153517576,
                                      -0.00329722778496721, -0.00454159188836104, -0.00532503943719379, -0.00511609641494969,
                                      -0.00335303108353253,	0.000467378256812121,	0.00669698947947776,	0.0154543805501578,
                                      0.0265682284681889,	0.0395572362816352,	0.0536527377214753,	0.0678637406337799,
                                      0.0810775641753914,   0.0921834546917587,	0.100202592202597,	0.104406407522824,
                                      0.104406407522824,	0.100202592202597,0.0921834546917587,	0.0810775641753914,
                                      0.0678637406337799,	0.0536527377214753,	0.0395572362816352,0.0265682284681889,
                                      0.0154543805501578,	0.00669698947947776,	0.000467378256812121, -0.00335303108353253,
                                      -0.00511609641494969, -0.00532503943719379, -0.00454159188836104, -0.00329722778496721,
                                      -0.00202173153517576,  -0.000998539719042849, -0.000351170884883739, -5.95410478512873e-05 };
float low_pass_filter_70_2000[40] ={ -1.21901437343314e-05, 0.000174366759811581, 0.000433431358581053, -9.69940875770749e-05, -0.00227344360094405, -0.00564384259437804, -0.00788403469388535, -0.00603634203400215, 0.000800684826660659, 0.00927411954794619, 0.0123726766585458, 0.00356310706740559, -0.0174808112118933, -0.0414382515765563, -0.0515349824782561, -0.0315571029019479, 0.0241220148214914, 0.104445624825672, 0.183968365261098, 0.233420668754351, 0.233420668754351, 0.183968365261098, 0.104445624825672, 0.0241220148214914, -0.0315571029019479, -0.0515349824782561, -0.0414382515765563, -0.0174808112118933, 0.00356310706740559, 0.0123726766585458, 0.00927411954794619, 0.000800684826660659, -0.00603634203400215, -0.00788403469388535, -0.00564384259437804, -0.00227344360094405, -9.69940875770749e-05, 0.000433431358581053, 0.000174366759811581, -1.21901437343314e-05 };
float low_pass_filter_70_1750[40] = { 0.000022, -0.000135, -0.000913, -0.002399, -0.003850, -0.003861, -0.001316, 0.003372, 0.007632, 0.007485, -0.000281, -0.015458, -0.032827, -0.042955, -0.035613, -0.004611, 0.048188, 0.111849, 0.169315, 0.203408, 0.203408, 0.169315, 0.111849, 0.048188, -0.004611, -0.035613, -0.042955, -0.032827, -0.015458, -0.000281, 0.007485, 0.007632, 0.003372, -0.001316, -0.003861, -0.003850, -0.002399, -0.000913, -0.000135, 0.000022 };
float low_pass_filter_48000_70_8000[40] = { 9.327857e-05, 1.908940e-04, -4.941507e-04, -1.795429e-03, -1.494147e-03, 2.080541e-03, 6.052848e-03, 4.079344e-03, -5.775134e-03, -1.478803e-02, -9.576343e-03, 1.158763e-02, 2.962914e-02, 1.858922e-02, -2.445953e-02, -6.306806e-02, -4.269810e-02, 6.099665e-02, 2.091549e-01, 3.176555e-01, 3.176555e-01, 2.091549e-01, 6.099665e-02, -4.269810e-02, -6.306806e-02, -2.445953e-02, 1.858922e-02, 2.962914e-02, 1.158763e-02, -9.576343e-03, -1.478803e-02, -5.775134e-03, 4.079344e-03, 6.052848e-03, 2.080541e-03, -1.494147e-03, -1.795429e-03, -4.941507e-04, 1.908940e-04, 9.327857e-05 };
float low_pass_filter_44100_10_8000[40] = { -2.492881e-05, 3.045636e-04, 8.165160e-04, -1.162855e-04, -2.718580e-03, -3.246067e-03, 1.821181e-03, 8.224446e-03, 5.588785e-03, -8.426779e-03, -1.865990e-02, -6.455710e-03, 2.264700e-02, 3.374885e-02, -1.063832e-03, -5.767364e-02, -6.380174e-02, 3.488402e-02, 2.068815e-01, 3.424173e-01, 3.424173e-01, 2.068815e-01, 3.488402e-02, -6.380174e-02, -5.767364e-02, -1.063832e-03, 3.374885e-02, 2.264700e-02, -6.455710e-03, -1.865990e-02, -8.426779e-03, 5.588785e-03, 8.224446e-03, 1.821181e-03, -3.246067e-03, -2.718580e-03, -1.162855e-04, 8.165160e-04, 3.045636e-04, -2.492881e-05 };
float low_pass_filter_22050_10_8000[40] = { 3.802429e-05, -4.107161e-04, 7.197079e-04, -2.325024e-04, -2.137867e-03, 4.133965e-03, -3.919774e-03, -2.146546e-03, 9.530298e-03, -1.400627e-02, 5.631246e-03, 1.134284e-02, -3.005009e-02, 2.868225e-02, -2.128338e-03, -4.718721e-02, 8.306517e-02, -6.855088e-02, -5.833439e-02, 5.766820e-01, 5.766820e-01, -5.833439e-02, -6.855088e-02, 8.306517e-02, -4.718721e-02, -2.128338e-03, 2.868225e-02, -3.005009e-02, 1.134284e-02, 5.631246e-03, -1.400627e-02, 9.530298e-03, -2.146546e-03, -3.919774e-03, 4.133965e-03, -2.137867e-03, -2.325024e-04, 7.197079e-04, -4.107161e-04, 3.802429e-05};
float low_pass_filter_16000_10_1750[40] = { 6.322330e-05, 2.957112e-05, -5.474433e-04, -1.757999e-03, -2.861439e-03, -2.455069e-03, 5.741652e-04, 5.801064e-03, 1.062929e-02, 1.104928e-02, 3.820876e-03, -1.086017e-02, -2.776476e-02, -3.742957e-02, -2.959156e-02, 1.956833e-03, 5.533322e-02, 1.195459e-01, 1.774532e-01, 2.117920e-01, 2.117920e-01, 1.774532e-01, 1.195459e-01, 5.533322e-02, 1.956833e-03, -2.959156e-02, -3.742957e-02, -2.776476e-02, -1.086017e-02, 3.820876e-03, 1.104928e-02, 1.062929e-02, 5.801064e-03, 5.741652e-04, -2.455069e-03, -2.861439e-03, -1.757999e-03, -5.474433e-04, 2.957112e-05, 6.322330e-05 };
float low_pass_filter_32000_10_8000[40] = { 3.783406e-05, 1.609657e-05, -3.064438e-04, -1.151295e-03, -2.623033e-03, -4.622551e-03, -6.794642e-03, -8.528473e-03, -9.019459e-03, -7.388227e-03, -2.839386e-03, 5.167567e-03, 1.676815e-02, 3.159549e-02, 4.875967e-02, 6.691503e-02, 8.441040e-02, 9.950160e-02, 1.105929e-01, 1.164674e-01, 1.164674e-01, 1.105929e-01, 9.950160e-02, 8.441040e-02, 6.691503e-02, 4.875967e-02, 3.159549e-02, 1.676815e-02, 5.167567e-03, -2.839386e-03, -7.388227e-03, -9.019459e-03, -8.528473e-03, -6.794642e-03, -4.622551e-03, -2.623033e-03, -1.151295e-03, -3.064438e-04, 1.609657e-05, 3.783406e-05};
LowPassFilter::LowPassFilter()
{
    m_bEnable = false;
}

LowPassFilter::~LowPassFilter()
{
    if (m_filter)
    {
        delete m_filter;
    }
}

void LowPassFilter::Enable( bool bEnable)
{
    m_bEnable = bEnable;
}

bool LowPassFilter::IsEnable() const
{
    return m_bEnable;
}

void LowPassFilter::Processing( const int16_t* in, int16_t* out, size_t nSamples )
{
    if ( !m_bEnable )
    {
        if ( in != out)
        {
            memcpy( out, in, nSamples * sizeof( int16_t ) );
        }
        return;
    }
    if ( !m_filter )
    {
        if ( !m_pFilterCocc )
        {
            int samplerate = nSamples * 100;
            if ( samplerate > 48000 )
            {
                samplerate /= 2;
            }
            SetSampleRate( samplerate );
        }
        m_filter = webrtc::FIRFilter::Create( m_pFilterCocc, 40, nSamples );
        m_fin = new float[nSamples];
        m_fout = new float[nSamples];

    }

    size_t i = 0;
    for (; i< nSamples; i++ )
    {
        m_fin[i] = in[i];
    }

    m_filter->Filter( m_fin, nSamples, m_fout );
    i = 0;
    for ( ; i  < nSamples; i++ )
    {
        out[i] = static_cast<int16_t>(m_fout[i]+0.5);
    }
}

void LowPassFilter::SetSampleRate( int samplerate )
{
    switch ( samplerate )
    {
    case 48000:
        m_pFilterCocc = low_pass_filter_48000_70_8000;
        break;
    case 44100:
        m_pFilterCocc = low_pass_filter_44100_10_8000;
        break;
    case 32000:
        m_pFilterCocc = low_pass_filter_32000_10_8000;
        break;
    case 22025:
        m_pFilterCocc = low_pass_filter_22050_10_8000;
        break;
    case 16000:
        m_pFilterCocc = low_pass_filter_16000_10_1750;
        break;
    default:
        break;
    }
}
