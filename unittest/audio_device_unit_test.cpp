#include <iostream>
#include <list>
#include <mutex>
#include <algorithm>
#include <cassert>
#include <complex>
#include <thread>
#include <conio.h>
#include <algorithm>

#include "base/fft.h"
#include "base/audio_util.h"
#include "device/include/audio_device.h"
#include "effect/3d/include/mit_hrtf_lib.h"
#include "io/wav_file.h"
#include "base/circular_buffer.hpp"
#include "effect/3d/include/mixer3d.h"
#include "audio_effect.h"
#include "base/time_cvt.hpp"
#include "base/min_max_heap.hpp"
//#include "dispatch_example.cpp"

// Example: main calls myfunc
extern int test_vcl( int argc, char* argv[] );
#ifdef _DEBUG
#pragma comment(lib,"../build/winx/Debug/audio_device.lib")
#pragma comment(lib,"../build/winx/Debug/audio_effect.lib")
#pragma comment(lib,"../build/winx/Debug/audio_io.lib")
#pragma comment(lib,"../build/winx/Debug/audio_base.lib")
#pragma comment(lib,"../build/winx/Debug/audio_processing.lib")
#pragma comment(lib,"../build/winx/Debug/libmpg123.lib")
#pragma comment(lib,"../build/winx/Debug/libmp3lame.lib")
#pragma comment(lib,"../build/winx/Debug/aac.lib")
#else
#pragma comment(lib,"../build/winx/Release/audio_device.lib")
#pragma comment(lib,"../build/winx/Release/audio_effect.lib")
#pragma comment(lib,"../build/winx/Release/audio_io.lib")
#pragma comment(lib,"../build/winx/Release/audio_base.lib")
#pragma comment(lib,"../build/winx/Release/audio_processing.lib")
#pragma comment(lib,"../build/winx/Release/libmpg123.lib")
#pragma comment(lib,"../build/winx/Release/libmp3lame.lib")
#pragma comment(lib,"../build/winx/Release/aac.lib")
#endif
#pragma comment(lib, "ws2_32")
#pragma comment(lib, "strmiids")
#pragma comment(lib, "msdmo")
#pragma comment(lib, "dmoguids")
#pragma comment(lib, "wmcodecdspuuid")
#pragma comment(lib,"winmm.lib")
using namespace std;
typedef lock_guard<mutex> lockguard;

#define  complex std::complex<float>


//typedef std::complex<float> complex;
// 卷积公式
//y(n)=sum(x(k)h(n-k)), 其中 n-k>0,0<n<N,0<k<M
// 参见《信号与系统》第50页
template <class T>
void conv( T *x, T* h, T *y, size_t xn, size_t hn, size_t yn )
{
    memset( y, 0, sizeof( T ) * yn);
    for ( size_t n = 0; n < yn; n++ )
        for ( size_t j = 0; j < xn; j++ )
            if ( n -j >= 0 && n - j < hn )
                y[n] += x[j] * h[n - j];
}

#define TEST_CONV
void convolution( const float*input, complex*irc, float *output, int nFFT, int nFil, int nSig )
{
#ifdef TEST_CONV
    for (int i = 0; i < nFFT; i++)
    {
        if ( i < nSig )
        {
            output[i] = input[i];
        }
        else
        {
            output[i] = 0;
        }
    }
    return;
#endif

    complex*inc, *outc;
    inc = new complex[nFFT];
    for ( int i = 0; i < nFFT; i++ )
    {
        if ( i < nSig )
        {
            inc[i] = complex( (float)input[i] );
        }
        else
        {
            inc[i] = complex( 0 );
        }
    }

    CFFT::Forward( inc, nFFT );
    outc = new complex[nFFT];
    for ( int i = 0; i < nFFT; i++ )
    {
        outc[i] = inc[i] * irc[i];
    }

    CFFT::Inverse( outc, nFFT );

    for ( int i = 0; i < nFFT; i++ )
    {
        output[i] = (float)( outc[i].real() );
    }
    delete[] inc;
    delete[] outc;
}



class CAudioBufferProc : public  AudioBufferProc
{
    bool m_processhrtf;
    list<char*> m_list;
    mutex   m_lock;
    Mixer3D m_Mixer3D;
    AudioEffect* pEffect;
public:
    CAudioBufferProc(bool processhrtf) :m_processhrtf(processhrtf), m_Mixer3D(48000)
    {
         int nAzimuth = 90;
         int nElevation = 0;
         m_Mixer3D.updateAngles( nAzimuth, nElevation );
         pEffect = new AudioEffect;
         pEffect->Init( 48000, 2, 48000, 2 );
    }

    virtual void RecordingDataIsAvailable( const void*data, size_t samples )
    {
        lockguard lg( m_lock );
        pEffect->ProcessCaptureStream( (int16_t*)data, samples );

        if (!pEffect->HasVoice())
        {
            //printf( "cur frame is silent\n" );
        }
        if (m_processhrtf)
        {
            m_Mixer3D.AddProcessData( (int16_t*)data, samples / 2 );
            for ( ;; )
            {
                char* pData = new char[samples];
                size_t readsample = m_Mixer3D.GetProcessData( (int16_t*)pData, samples / 2 );
                if (readsample == 0)
                {
                    delete[] pData;
                    return;
                }
               
                m_list.push_back( (char*)pData );
            }
        }
        else
        {
            char* pData = new char[samples];
            if (!pEffect->HasVoice())
            {
                memset( pData, 0, samples );
            }
            else
            {
                memcpy( pData, data, samples );
            }
            m_list.push_back( (char*)pData );
        }
    }

    virtual size_t NeedMorePlayoutData( void* data, size_t samples )
    {

        lockguard lg( m_lock );
        if (m_list.size()<50)
        {
            return samples;
        }
        
         char* p = m_list.front();
         m_list.pop_front();
       memcpy( data, p, samples );
         delete p;
         return samples;
    }

    virtual void ErrorOccurred(AudioError aeCode) {}
    void UpdateAngles( int nAzimuth, int nElevation )
    {
        m_Mixer3D.updateAngles( nAzimuth, nElevation );
    }
};


void test_conv()
{
    // test conv time remains
    int16_t x[3] = { 1, 2, 3 };
    int16_t h[5] = { 1, 3, 5, 7, 9 };
    int16_t y[10] = { 0 };
    conv( x, h, y, 3, 5, 10 );
    int16_t res[10] = {1,5,14,26,38,39,27,0,0,0};
    assert( !memcmp( y, res, sizeof( int16_t ) * 10 ) );
    conv( h, x, y, 5, 3, 10 );
    assert( !memcmp( y, res, sizeof( int16_t ) * 10 ) );
    for ( int i = 0; i < 10; i++ )
    {
        //std::cout << y[i] << "\t";
    }
    std::cout << endl;
    complex data[] = { 1, 2, 3, 4 };
    bool b = CFFT::Forward( data, 4 );
    assert( b );
    b = CFFT::Inverse( data, 4 );
    assert( b );
    for ( int i = 0; i < 4; i++ )
    {
       // cout << data[i].re() << ",";
        assert( data[i].real() == i+1 );
    }

    //test convolution

}

void test_windows_core_audio()
{
    AudioDevice* pWinDevice = AudioDevice::Create();

    pWinDevice->Initialize();
    pWinDevice->InitPlayout();
    pWinDevice->InitRecording();

    CAudioBufferProc cb(false);
    pWinDevice->SetAudioBufferCallback( &cb );
    pWinDevice->StartPlayout();
    pWinDevice->StartRecording();

    system( "pause" );

    pWinDevice->StopRecording();
    pWinDevice->StopPlayout();
    system( "pause" );
    pWinDevice->InitPlayout();
    pWinDevice->InitRecording();
    pWinDevice->StartPlayout();
    pWinDevice->StartRecording();
    system( "pause" );
    pWinDevice->Terminate();
    pWinDevice->Release();
}

void test_hrtf( int nAzimuth, int nElevation, const char* inputfile, const char*outputfile )
{

    WavReader reader( inputfile );
    int len = reader.num_samples();

    const int nFFT = 4096;
    float pLeft[nFFT] = {0};
    float pRight[nFFT] = { 0 };
    int nFil = mit_hrtf_get( &nAzimuth, &nElevation, reader.sample_rate(), 0, pLeft, pRight );
    if ( nFil == 0 ) return;
    complex flt[nFFT] = { 0 };
    for ( int i = 0; i < nFil;i++ )
    {
        flt[i] = complex(pLeft[i]);

    }
    CFFT::Forward( flt, nFFT );

    WavWriter writer( outputfile, reader.sample_rate(), 1 );

    int16_t pSrc[nFFT*2];
    reader.ReadSamples( nFFT*reader.num_channels(), pSrc );
    reader.ReadSamples( nFFT*reader.num_channels(), pSrc );
    reader.ReadSamples( nFFT*reader.num_channels(), pSrc );
    int16_t pMono[nFFT];
    DownmixInterleavedToMono(pSrc,nFFT,reader.num_channels(),pMono);
    writer.WriteSamples( pMono, nFFT );
    float pData[nFFT];
    S16ToFloat(pMono,nFFT,pData);
    float output[nFFT];
    convolution(pData,flt,output,nFFT,nFil,nFFT);
    FloatToS16( output, nFFT,pSrc );

    writer.WriteSamples( pSrc, nFFT );
}

void test_real_time_3d()
{
    int nAzimuth = 0; int nElevation = 0;
    AudioDevice* pWinDevice = AudioDevice::Create();
    pWinDevice->Initialize();
    pWinDevice->SetRecordingFormat( 48000, 2 );
    pWinDevice->SetPlayoutFormat( 48000, 2 );
    pWinDevice->InitPlayout();
    pWinDevice->InitRecording();

    CAudioBufferProc cb( true);
    pWinDevice->SetAudioBufferCallback( &cb );
    pWinDevice->StartPlayout();
    pWinDevice->StartRecording();
    char ch = '\n';
    printf( "\n" );
    do
    {
        std::this_thread::sleep_for( std::chrono::milliseconds( 10 ) );
        if ( _kbhit() )
        {
            
            ch = _getch();
            switch ( ch )
            {
            case 'a':
                nAzimuth -= 15;
                break;
            case 'd':
                nAzimuth += 15;
                break;
            case 'w':
                nElevation += 10;
                break;
            case 's':
                nElevation -= 10;
                break;
            default:
                printf( "invalid argment:%c",ch );
            }
#define fuck
            nAzimuth = std::min fuck( std::max fuck ( nAzimuth, -180 ), 180 );
            nElevation = std::min fuck( std::max fuck ( nElevation, -40 ), 90 );
            cb.UpdateAngles( nAzimuth, nElevation );
            
            printf( "nAzimuth:%d,nElevation:%d\r", nAzimuth, nElevation );
        }


    } while ( ( ch != 'Q' ) && ( ch != 'q' ) );

    pWinDevice->StopRecording();
    pWinDevice->StopPlayout();
    pWinDevice->Terminate();
    pWinDevice->Release();
}


void test_mit_hrtf_get()
{
    int nAzimuth = 0;
    int nElevation = 0;
    int nFil = mit_hrtf_availability( nAzimuth, nElevation, 48000, 0 );
    int16_t *irL_ = nullptr;
    int16_t *irR_ = nullptr;
    float* fl = nullptr;
    float* fr = nullptr;
    if ( nFil )
    {
        irL_ = new int16_t[nFil];
        irR_ = new int16_t[nFil];
        fl = new float[nFil];
        fr = new float[nFil];
        nFil = mit_hrtf_get( &nAzimuth, &nElevation, 48000, 0, irL_, irR_ );
        nFil = mit_hrtf_get( &nAzimuth, &nElevation, 48000, 0, fl, fr );
        short* flt = new short[nFil];
        short* frt = new short[nFil];
        FloatToS16( fl, nFil, flt );
        FloatToS16( fr, nFil, frt );

        for ( int i = 0; i < nFil; i++ )
        {
            //cout << flt[i] << "---" << fl[i] << '\n';
            //cout << frt[i] << "---" << fr[i] << '\n';
            assert( flt[i] == irL_[i] && frt[i] == irR_[i] );
        }
        delete[] irR_;
        delete[] irL_;
        delete[] fl;
        delete[] fr;
        delete[] flt;
        delete[] frt;
    }
    else
    {
        return;
    }
}

void test_circular_buffer()
{
    const int capacity = 10;
    CircularAudioBuffer buffer(capacity);
    assert(0 == buffer.readSizeRemaining());
    assert( 10 == buffer.writeSizeRemaining() );
    int16_t data[4] = { 1, 2, 3, 4 };
    assert(4 == buffer.write(data,4));
    assert( 6 == buffer.writeSizeRemaining() );
    assert( 4 == buffer.readSizeRemaining() );
    int16_t ReadData[4] = { 0 };
    assert( 4 == buffer.read( ReadData, 4 ) );
    assert( !memcmp( ReadData, data, 4 * sizeof( int16_t ) ) );
    assert( 0 == buffer.read( ReadData, 3 ) );
    int16_t data10[10] = {1,2,3,4,5,6,7,8,9,10};
    assert( 10 == buffer.write( data10, 10 ) );
    assert( 0 == buffer.write( data, 4 ) );
}
#include "io/include/audioreader.h"
#include "io/include/audiowriter.h"

class Mp3ReadProc : public  AudioBufferProc
{
    AudioReader* pMp3Reader;
    AudioWriter* pMp3Writer;
    int64_t   m_ts = 0;
public:
    Mp3ReadProc()
    {
        pMp3Reader = AudioReader::Create("E:/CloudMusic/Mariage.mp3",AFT_MP3);
       // pMp3Reader->SetSpeed( 1 );
        pMp3Writer = AudioWriter::Create( "D:/myvoice.aac",44100,2, AFT_AAC );
        std::cout << timestamp() << std::endl;
        m_ts = timestamp();
    }
    ~Mp3ReadProc()
    {
        auto ts = timestamp();
        std::cout << "\n record time: " << ts - m_ts << " sample number： " << pMp3Writer->NumSamples() / pMp3Writer->SampleRate()/pMp3Writer->NumChannels() << std::endl;
        pMp3Reader->Destroy();
        pMp3Writer->Destroy();
    }
    virtual void RecordingDataIsAvailable( const void*data, size_t size_in_byte )
    {
        pMp3Writer->WriteSamples( (int16_t*)data, size_in_byte/2 );
    };
    virtual size_t NeedMorePlayoutData( void*data, size_t size_in_byte )
    {
        int len = pMp3Reader->ReadSamples( size_in_byte / 2, (int16_t*)data );
        pMp3Writer->WriteSamples( (int16_t*)data, size_in_byte / 2 );
        if (len == 0)
        {
            pMp3Reader->SeekTime( 0 );
        }
        return size_in_byte;
    }
};



void test_play_mp3()
{
    AudioDevice* pWinDevice = AudioDevice::Create();
    pWinDevice->Initialize();
    pWinDevice->InitPlayout();
    pWinDevice->InitRecording();

    Mp3ReadProc cb;
    pWinDevice->SetAudioBufferCallback( &cb );
    pWinDevice->StartPlayout();
  //  pWinDevice->StartRecording();
    system( "pause" );
    pWinDevice->StopPlayout();
    pWinDevice->StopRecording();
    pWinDevice->Terminate();
    pWinDevice->Release();
}


void test_audio_processing()
{
    WavReader reader_rec( "D:/log/test1.wav" );
    int samplerate = reader_rec.sample_rate();
    int channel = reader_rec.num_channels();

    WavWriter writer( "d:/log/test-pro.wav", samplerate, channel );
    AudioEffect ae;
    ae.Init( samplerate, channel, samplerate, channel );
    int frames = samplerate / 100 * channel;
    int16_t* buf = new int16_t[frames];
    for ( ;; )
    {
        if ( frames != reader_rec.ReadSamples( frames, buf ) )
             break;
        ae.ProcessCaptureStream( buf, frames*2 );

        while (ae.GetRecordingData(buf,frames*2,false))
        {
            writer.WriteSamples( buf, frames );
        }
    }
    while ( ae.GetRecordingData( buf, frames * 2, true ) )
    {
        writer.WriteSamples( buf, frames );
    }
    delete[] buf;
}
float hw[] = { 0.000001, 0.000002, 0.000005, 0.000009, 0.000015, 0.000021, 0.000029, 0.000038, 0.000048, 0.000059, 0.000071, 0.000085, 0.000099, 0.000115, 
0.000132, 0.000151, 0.000170, 0.000190, 0.000212, 0.000235, 0.000259, 0.000285, 0.000311, 0.000339, 0.000367, 0.000397, 0.000429, 0.000461, 0.000494, 0.000529, 
0.000565, 0.000602, 0.000640, 0.000680, 0.000720, 0.000762, 0.000805, 0.000849, 0.000894, 0.000940, 0.000988, 0.001037, 0.001087, 0.001138, 0.001190, 0.001244,
0.001298, 0.001354, 0.001411, 0.001469, 0.001529, 0.001589, 0.001651, 0.001714, 0.001778, 0.001843, 0.001909, 0.001977, 0.002045, 0.002115, 0.002186, 0.002259, 
0.002332, 0.002406, 0.002482, 0.002559, 0.002637, 0.002716, 0.002797, 0.002878, 0.002961, 0.003045, 0.003130, 0.003216, 0.003304, 0.003392, 0.003482, 0.003573,
0.003665, 0.003758, 0.003853, 0.003948, 0.004045, 0.004143, 0.004242, 0.004342, 0.004444, 0.004546, 0.004650, 0.004755, 0.004861, 0.004968, 0.005077, 0.005186,
0.005297, 0.005409, 0.005522, 0.005636, 0.005752, 0.005868, 0.005986, 0.006105, 0.006225, 0.006346, 0.006469, 0.006592, 0.006717, 0.006843, 0.006970, 0.007098, 
0.007227, 0.007358, 0.007489, 0.007622, 0.007756, 0.007891, 0.008027, 0.008165, 0.008303, 0.008443, 0.008584, 0.008726, 0.008869, 0.009014, 0.009159, 0.009306, 
0.009454, 0.009603, 0.009753, 0.009904, 0.010057, 0.010210, 0.010365, 0.010521, 0.010678, 0.010836, 0.010995, 0.011156, 0.011318, 0.011480, 0.011644, 0.011809,
0.011976, 0.012143, 0.012312, 0.012481, 0.012652, 0.012824, 0.012997, 0.013171, 0.013347, 0.013523, 0.013701, 0.013880, 0.014060, 0.014241, 0.014423, 0.014607, 
0.014791, 0.014977, 0.015164, 0.015352, 0.015541, 0.015731, 0.015923, 0.016115, 0.016309, 0.016504, 0.016700, 0.016897, 0.017095, 0.017294, 0.017495, 0.017697,
0.017899, 0.018103, 0.018308, 0.018514, 0.018722, 0.018930, 0.019140, 0.019350, 0.019562, 0.019775, 0.019989, 0.020204, 0.020421, 0.020638, 0.020857, 0.021077, 
0.021297, 0.021519, 0.021743, 0.021967, 0.022192, 0.022419, 0.022646, 0.022875, 0.023105, 0.023336, 0.023568, 0.023801, 0.024035, 0.024271, 0.024507, 0.024745,
0.024984, 0.025224, 0.025465, 0.025707, 0.025950, 0.026195, 0.026440, 0.026687, 0.026934, 0.027183, 0.027433, 0.027684, 0.027936, 0.028190, 0.028444, 0.028700,
0.028956, 0.029214, 0.029473, 0.029733, 0.029994, 0.030256, 0.030519, 0.030783, 0.031049, 0.031315, 0.031583, 0.031852, 0.032122, 0.032393, 0.032665, 0.032938,
0.033212, 0.033487, 0.033764, 0.034041, 0.034320, 0.034600, 0.034881, 0.035163, 0.035446, 0.035730, 0.036015, 0.036301, 0.036589, 0.036877, 0.037167, 0.037457, 
0.037749, 0.038042, 0.038336, 0.038631, 0.038927, 0.039224, 0.039522, 0.039822, 0.040122, 0.040424, 0.040726, 0.041030, 0.041335, 0.041640, 0.041947, 0.042255, 
0.042564, 0.042874, 0.043186, 0.043498, 0.043811, 0.044126, 0.044441, 0.044758, 0.045075, 0.045394, 0.045714, 0.046035, 0.046357, 0.046680, 0.047004, 0.047329,
0.047655, 0.047982, 0.048311, 0.048640, 0.048970, 0.049302, 0.049634, 0.049968, 0.050303, 0.050638, 0.050975, 0.051313, 0.051652, 0.051992, 0.052333, 0.052675, 
0.053018, 0.053362, 0.053707, 0.054054, 0.054401, 0.054749, 0.055099, 0.055449, 0.055801, 0.056153, 0.056507, 0.056862, 0.057217, 0.057574, 0.057932, 0.058290,
0.058650, 0.059011, 0.059373, 0.059736, 0.060100, 0.060465, 0.060831, 0.061198, 0.061566, 0.061935, 0.062306, 0.062677, 0.063049, 0.063422, 0.063796, 0.064172,
0.064548, 0.064926, 0.065304, 0.065683, 0.066064, 0.066445, 0.066828, 0.067211, 0.067596, 0.067981, 0.068368, 0.068755, 0.069144, 0.069533, 0.069924, 0.070316,
0.070708, 0.071102, 0.071496, 0.071892, 0.072289, 0.072686, 0.073085, 0.073485, 0.073885, 0.074287, 0.074690, 0.075093, 0.075498, 0.075904, 0.076310, 0.076718,
0.077127, 0.077536, 0.077947, 0.078359, 0.078771, 0.079185, 0.079600, 0.080015, 0.080432, 0.080849, 0.081268, 0.081687, 0.082108, 0.082529, 0.082952, 0.083375, 
0.083800, 0.084225, 0.084652, 0.085079, 0.085507, 0.085937, 0.086367, 0.086798, 0.087231, 0.087664, 0.088098, 0.088533, 0.088969, 0.089406, 0.089844, 0.090284,
0.090724, 0.091164, 0.091606, 0.092049, 0.092493, 0.092938, 0.093384, 0.093830, 0.094278, 0.094727, 0.095176, 0.095627, 0.096078, 0.096531, 0.096984, 0.097438, 
0.097894, 0.098350, 0.098807, 0.099265, 0.099724, 0.100184, 0.100645, 0.101107, 0.101570, 0.102033, 0.102498, 0.102964, 0.103430, 0.103898, 0.104366, 0.104836, 
0.105306, 0.105777, 0.106249, 0.106722, 0.107196, 0.107671, 0.108147, 0.108624, 0.109101, 0.109580, 0.110059, 0.110540, 0.111021, 0.111503, 0.111987, 0.112471, 
0.112956, 0.113442, 0.113928, 0.114416, 0.114905, 0.115394, 0.115885, 0.116376, 0.116868, 0.117361, 0.117855, 0.118350, 0.118846, 0.119343, 0.119841, 0.120339, 
0.120839, 0.121339, 0.121840, 0.122342, 0.122845, 0.123349, 0.123854, 0.124359, 0.124866, 0.125373, 0.125882, 0.126391, 0.126901, 0.127412, 0.127923, 0.128436, 
0.128950, 0.129464, 0.129979, 0.130496, 0.131013, 0.131530, 0.132049, 0.132569, 0.133089, 0.133611, 0.134133, 0.134656, 0.135180, 0.135705, 0.136230, 0.136757, 
0.137284, 0.137812, 0.138342, 0.138871, 0.139402, 0.139934, 0.140466, 0.141000, 0.141534, 0.142069, 0.142605, 0.143141, 0.143679, 0.144217, 0.144756, 0.145296, 
0.145837, 0.146379, 0.146921, 0.147465, 0.148009, 0.148554, 0.149100, 0.149646, 0.150194, 0.150742, 0.151291, 0.151841, 0.152392, 0.152944, 0.153496, 0.154049, 
0.154603, 0.155158, 0.155714, 0.156270, 0.156828, 0.157386, 0.157945, 0.158504, 0.159065, 0.159626, 0.160188, 0.160751, 0.161315, 0.161879, 0.162444, 0.163011,
0.163577, 0.164145, 0.164714, 0.165283, 0.165853, 0.166424, 0.166995, 0.167568, 0.168141, 0.168715, 0.169289, 0.169865, 0.170441, 0.171018, 0.171596, 0.172175,
0.172754, 0.173334, 0.173915, 0.174497, 0.175079, 0.175662, 0.176246, 0.176831, 0.177417, 0.178003, 0.178590, 0.179178, 0.179766, 0.180355, 0.180945, 0.181536,
0.182128, 0.182720, 0.183313, 0.183907, 0.184501, 0.185097, 0.185693, 0.186289, 0.186887, 0.187485, 0.188084, 0.188684, 0.189284, 0.189885, 0.190487, 0.191089, 
0.191693, 0.192297, 0.192902, 0.193507, 0.194113, 0.194720, 0.195328, 0.195936, 0.196545, 0.197155, 0.197766, 0.198377, 0.198989, 0.199601, 0.200215, 0.200829, 
0.201443, 0.202059, 0.202675, 0.203292, 0.203909, 0.204528, 0.205147, 0.205766, 0.206387, 0.207008, 0.207629, 0.208252, 0.208875, 0.209499, 0.210123, 0.210748,
0.211374, 0.212000, 0.212628, 0.213255, 0.213884, 0.214513, 0.215143, 0.215773, 0.216405, 0.217037, 0.217669, 0.218302, 0.218936, 0.219571, 0.220206, 0.220842,
0.221478, 0.222115, 0.222753, 0.223392, 0.224031, 0.224670, 0.225311, 0.225952, 0.226593, 0.227236, 0.227879, 0.228522, 0.229167, 0.229812, 0.230457, 0.231103, 
0.231750, 0.232397, 0.233045, 0.233694, 0.234343, 0.234993, 0.235644, 0.236295, 0.236947, 0.237599, 0.238252, 0.238906, 0.239560, 0.240215, 0.240871, 0.241527, 
0.242183, 0.242841, 0.243499, 0.244157, 0.244816, 0.245476, 0.246136, 0.246797, 0.247459, 0.248121, 0.248784, 0.249447, 0.250111, 0.250775, 0.251440, 0.252106, 
0.252772, 0.253439, 0.254106, 0.254774, 0.255443, 0.256112, 0.256782, 0.257452, 0.258123, 0.258794, 0.259466, 0.260138, 0.260812, 0.261485, 0.262159, 0.262834,
0.263510, 0.264185, 0.264862, 0.265539, 0.266216, 0.266894, 0.267573, 0.268252, 0.268932, 0.269612, 0.270293, 0.270975, 0.271656, 0.272339, 0.273022, 0.273705, 
0.274389, 0.275074, 0.275759, 0.276445, 0.277131, 0.277817, 0.278505, 0.279192, 0.279881, 0.280569, 0.281259, 0.281948, 0.282639, 0.283330, 0.284021, 0.284713, 
0.285405, 0.286098, 0.286791, 0.287485, 0.288179, 0.288874, 0.289570, 0.290265, 0.290962, 0.291659, 0.292356, 0.293054, 0.293752, 0.294451, 0.295150, 0.295850, 
0.296550, 0.297251, 0.297952, 0.298653, 0.299356, 0.300058, 0.300761, 0.301465, 0.302169, 0.302873, 0.303578, 0.304284, 0.304989, 0.305696, 0.306402, 0.307110, 
0.307817, 0.308525, 0.309234, 0.309943, 0.310653, 0.311362, 0.312073, 0.312784, 0.313495, 0.314207, 0.314919, 0.315631, 0.316344, 0.317058, 0.317771, 0.318486, 
0.319200, 0.319916, 0.320631, 0.321347, 0.322063, 0.322780, 0.323498, 0.324215, 0.324933, 0.325652, 0.326371, 0.327090, 0.327810, 0.328530, 0.329250, 0.329971, 
0.330692, 0.331414, 0.332136, 0.332859, 0.333582, 0.334305, 0.335028, 0.335753, 0.336477, 0.337202, 0.337927, 0.338653, 0.339379, 0.340105, 0.340832, 0.341559, 
0.342286, 0.343014, 0.343742, 0.344471, 0.345200, 0.345929, 0.346659, 0.347389, 0.348119, 0.348850, 0.349581, 0.350313, 0.351044, 0.351777, 0.352509, 0.353242, 
0.353975, 0.354709, 0.355443, 0.356177, 0.356911, 0.357646, 0.358381, 0.359117, 0.359853, 0.360589, 0.361326, 0.362063, 0.362800, 0.363537, 0.364275, 0.365013,
0.365752, 0.366491, 0.367230, 0.367969, 0.368709, 0.369449, 0.370189, 0.370930, 0.371671, 0.372412, 0.373154, 0.373896, 0.374638, 0.375380, 0.376123, 0.376866,
0.377609, 0.378353, 0.379097, 0.379841, 0.380586, 0.381330, 0.382075, 0.382821, 0.383566, 0.384312, 0.385058, 0.385805, 0.386551, 0.387298, 0.388045, 0.388793, 
0.389541, 0.390289, 0.391037, 0.391785, 0.392534, 0.393283, 0.394032, 0.394782, 0.395532, 0.396282, 0.397032, 0.397782, 0.398533, 0.399284, 0.400035, 0.400787, 
0.401538, 0.402290, 0.403042, 0.403795, 0.404547, 0.405300, 0.406053, 0.406807, 0.407560, 0.408314, 0.409068, 0.409822, 0.410576, 0.411331, 0.412085, 0.412840, 
0.413595, 0.414351, 0.415106, 0.415862, 0.416618, 0.417374, 0.418131, 0.418887, 0.419644, 0.420401, 0.421158, 0.421915, 0.422673, 0.423430, 0.424188, 0.424946,
0.425705, 0.426463, 0.427221, 0.427980, 0.428739, 0.429498, 0.430257, 0.431017, 0.431776, 0.432536, 0.433296, 0.434056, 0.434816, 0.435576, 0.436337, 0.437098,
0.437858, 0.438619, 0.439380, 0.440142, 0.440903, 0.441664, 0.442426, 0.443188, 0.443950, 0.444712, 0.445474, 0.446236, 0.446999, 0.447761, 0.448524, 0.449287, 
0.450050, 0.450813, 0.451576, 0.452339, 0.453102, 0.453866, 0.454629, 0.455393, 0.456157, 0.456921, 0.457685, 0.458449, 0.459213, 0.459977, 0.460742, 0.461506,
0.462271, 0.463036, 0.463800, 0.464565, 0.465330, 0.466095, 0.466860, 0.467625, 0.468390, 0.469156, 0.469921, 0.470687, 0.471452, 0.472218, 0.472983, 0.473749,
0.474515, 0.475281, 0.476047, 0.476813, 0.477579, 0.478345, 0.479111, 0.479877, 0.480643, 0.481409, 0.482176, 0.482942, 0.483708, 0.484475, 0.485241, 0.486008,
0.486774, 0.487541, 0.488307, 0.489074, 0.489841, 0.490607, 0.491374, 0.492141, 0.492907, 0.493674, 0.494441, 0.495208, 0.495974, 0.496741, 0.497508, 0.498275, 
0.499041, 0.499808, 0.500575, 0.501342, 0.502109, 0.502875, 0.503642, 0.504409, 0.505176, 0.505943, 0.506709, 0.507476, 0.508243, 0.509009, 0.509776, 0.510543,
0.511309, 0.512076, 0.512843, 0.513609, 0.514376, 0.515142, 0.515908, 0.516675, 0.517441, 0.518208, 0.518974, 0.519740, 0.520506, 0.521272, 0.522038, 0.522804,
0.523570, 0.524336, 0.525102, 0.525868, 0.526634, 0.527399, 0.528165, 0.528931, 0.529696, 0.530462, 0.531227, 0.531992, 0.532757, 0.533522, 0.534288, 0.535052, 
0.535817, 0.536582, 0.537347, 0.538111, 0.538876, 0.539640, 0.540405, 0.541169, 0.541933, 0.542697, 0.543461, 0.544225, 0.544989, 0.545752, 0.546516, 0.547279, 
0.548043, 0.548806, 0.549569, 0.550332, 0.551095, 0.551857, 0.552620, 0.553383, 0.554145, 0.554907, 0.555669, 0.556431, 0.557193, 0.557955, 0.558716, 0.559478,
0.560239, 0.561000, 0.561761, 0.562522, 0.563283, 0.564043, 0.564804, 0.565564, 0.566324, 0.567084, 0.567844, 0.568603, 0.569363, 0.570122, 0.570881, 0.571640, 
0.572399, 0.573158, 0.573916, 0.574675, 0.575433, 0.576191, 0.576948, 0.577706, 0.578463, 0.579221, 0.579978, 0.580734, 0.581491, 0.582248, 0.583004, 0.583760,
0.584516, 0.585271, 0.586027, 0.586782, 0.587537, 0.588292, 0.589047, 0.589801, 0.590555, 0.591309, 0.592063, 0.592817, 0.593570, 0.594323, 0.595076, 0.595829, 
0.596581, 0.597334, 0.598086, 0.598837, 0.599589, 0.600340, 0.601091, 0.601842, 0.602593, 0.603343, 0.604093, 0.604843, 0.605593, 0.606342, 0.607091, 0.607840,
0.608589, 0.609337, 0.610085, 0.610833, 0.611581, 0.612328, 0.613075, 0.613822, 0.614569, 0.615315, 0.616061, 0.616807, 0.617552, 0.618297, 0.619042, 0.619787, 
0.620531, 0.621275, 0.622019, 0.622762, 0.623505, 0.624248, 0.624991, 0.625733, 0.626475, 0.627217, 0.627958, 0.628700, 0.629440, 0.630181, 0.630921, 0.631661, 
0.632401, 0.633140, 0.633879, 0.634617, 0.635356, 0.636094, 0.636831, 0.637569, 0.638306, 0.639043, 0.639779, 0.640515, 0.641251, 0.641986, 0.642721, 0.643456, 
0.644190, 0.644924, 0.645658, 0.646392, 0.647125, 0.647857, 0.648590, 0.649322, 0.650053, 0.650785, 0.651515, 0.652246, 0.652976, 0.653706, 0.654436, 0.655165,
0.655893, 0.656622, 0.657350, 0.658078, 0.658805, 0.659532, 0.660258, 0.660984, 0.661710, 0.662436, 0.663161, 0.663885, 0.664610, 0.665333, 0.666057, 0.666780,
0.667503, 0.668225, 0.668947, 0.669668, 0.670389, 0.671110, 0.671830, 0.672550, 0.673270, 0.673989, 0.674708, 0.675426, 0.676144, 0.676861, 0.677578, 0.678295,
0.679011, 0.679727, 0.680442, 0.681157, 0.681871, 0.682586, 0.683299, 0.684012, 0.684725, 0.685437, 0.686149, 0.686861, 0.687572, 0.688282, 0.688993, 0.689702, 
0.690412, 0.691120, 0.691829, 0.692537, 0.693244, 0.693951, 0.694658, 0.695364, 0.696069, 0.696774, 0.697479, 0.698183, 0.698887, 0.699590, 0.700293, 0.700996, 0.701697, 0.702399, 0.703100, 0.703800, 0.704500, 0.705200, 0.705899, 0.706597, 0.707295, 0.707993, 0.708690, 0.709386, 0.710083, 0.710778, 0.711473, 0.712168, 0.712862, 0.713555, 0.714249, 0.714941, 0.715633, 0.716325, 0.717016, 0.717706, 0.718396, 0.719086, 0.719775, 0.720464, 0.721152, 0.721839, 0.722526, 0.723212, 0.723898, 0.724584, 0.725268, 0.725953, 0.726636, 0.727320, 0.728002, 0.728685, 0.729366, 0.730047, 0.730728, 0.731408, 0.732087, 0.732766, 0.733445, 0.734122, 0.734800, 0.735476, 0.736153, 0.736828, 0.737503, 0.738178, 0.738852, 0.739525, 0.740198, 0.740870, 0.741542, 0.742213, 0.742883, 0.743553, 0.744223, 0.744892, 0.745560, 0.746228, 0.746895, 0.747561, 0.748227, 0.748892, 0.749557, 0.750221, 0.750885, 0.751548, 0.752210, 0.752872, 0.753533, 0.754194, 0.754854, 0.755513, 0.756172, 0.756830, 0.757488, 0.758145, 0.758801, 0.759457, 0.760112, 0.760767, 0.761421, 0.762074, 0.762727, 0.763379, 0.764031, 0.764681, 0.765332, 0.765981, 0.766630, 0.767279, 0.767926, 0.768573, 0.769220, 0.769866, 0.770511, 0.771156, 0.771799, 0.772443, 0.773085, 0.773727, 0.774369, 0.775010, 0.775650, 0.776289, 0.776928, 0.777566, 0.778203, 0.778840, 0.779476, 0.780112, 0.780747, 0.781381, 0.782014, 0.782647, 0.783279, 0.783911, 0.784542, 0.785172, 0.785802, 0.786430, 0.787059, 0.787686, 0.788313, 0.788939, 0.789565, 0.790189, 0.790813, 0.791437, 0.792060, 0.792682, 0.793303, 0.793924, 0.794544, 0.795163, 0.795781, 0.796399, 0.797017, 0.797633, 0.798249, 0.798864, 0.799478, 0.800092, 0.800705, 0.801317, 0.801929, 0.802540, 0.803150, 0.803759, 0.804368, 0.804976, 0.805583, 0.806190, 0.806796, 0.807401, 0.808005, 0.808609, 0.809212, 0.809814, 0.810416, 0.811016, 0.811616, 0.812216, 0.812814, 0.813412, 0.814009, 0.814606, 0.815201, 0.815796, 0.816390, 0.816984, 0.817576, 0.818168, 0.818759, 0.819350, 0.819939, 0.820528, 0.821116, 0.821704, 0.822290, 0.822876, 0.823461, 0.824046, 0.824629, 0.825212, 0.825794, 0.826375, 0.826956, 0.827536, 0.828115, 0.828693, 0.829270, 0.829847, 0.830423, 0.830998, 0.831572, 0.832146, 0.832719, 0.833291, 0.833862, 0.834432, 0.835002, 0.835571, 0.836139, 0.836706, 0.837273, 0.837838, 0.838403, 0.838967, 0.839531, 0.840093, 0.840655, 0.841216, 0.841776, 0.842335, 0.842894, 0.843451, 0.844008, 0.844564, 0.845119, 0.845674, 0.846227, 0.846780, 0.847332, 0.847883, 0.848434, 0.848983, 0.849532, 0.850080, 0.850627, 0.851173, 0.851719, 0.852263, 0.852807, 0.853350, 0.853892, 0.854433, 0.854974, 0.855513, 0.856052, 0.856590, 0.857127, 0.857663, 0.858199, 0.858733, 0.859267, 0.859800, 0.860332, 0.860863, 0.861394, 0.861923, 0.862452, 0.862980, 0.863506, 0.864033, 0.864558, 0.865082, 0.865606, 0.866128, 0.866650, 0.867171, 0.867691, 0.868210, 0.868729, 0.869246, 0.869763, 0.870278, 0.870793, 0.871307, 0.871820, 0.872333, 0.872844, 0.873354, 0.873864, 0.874373, 0.874881, 0.875387, 0.875894, 0.876399, 0.876903, 0.877406, 0.877909, 0.878411, 0.878911, 0.879411, 0.879910, 0.880408, 0.880906, 0.881402, 0.881897, 0.882392, 0.882885, 0.883378, 0.883870, 0.884361, 0.884851, 0.885340, 0.885828, 0.886315, 0.886801, 0.887287, 0.887771, 0.888255, 0.888738, 0.889220, 0.889700, 0.890180, 0.890659, 0.891138, 0.891615, 0.892091, 0.892566, 0.893041, 0.893514, 0.893987, 0.894459, 0.894929, 0.895399, 0.895868, 0.896336, 0.896803, 0.897269, 0.897734, 0.898198, 0.898662, 0.899124, 0.899586, 0.900046, 0.900505, 0.900964, 0.901422, 0.901878, 0.902334, 0.902789, 0.903243, 0.903696, 0.904148, 0.904599, 0.905049, 0.905498, 0.905946, 0.906393, 0.906839, 0.907285, 0.907729, 0.908172, 0.908615, 0.909056, 0.909497, 0.909936, 0.910375, 0.910812, 0.911249, 0.911685, 0.912119, 0.912553, 0.912986, 0.913417, 0.913848, 0.914278, 0.914707, 0.915135, 0.915562, 0.915988, 0.916413, 0.916836, 0.917259, 0.917681, 0.918102, 0.918523, 0.918942, 0.919360, 0.919777, 0.920193, 0.920608, 0.921022, 0.921435, 0.921847, 0.922258, 0.922669, 0.923078, 0.923486, 0.923893, 0.924299, 0.924704, 0.925109, 0.925512, 0.925914, 0.926315, 0.926715, 0.927114, 0.927513, 0.927910, 0.928306, 0.928701, 0.929095, 0.929488, 0.929880, 0.930271, 0.930662, 0.931051, 0.931439, 0.931826, 0.932212, 0.932597, 0.932981, 0.933364, 0.933746, 0.934127, 0.934507, 0.934885, 0.935263, 0.935640, 0.936016, 0.936391, 0.936765, 0.937137, 0.937509, 0.937880, 0.938249, 0.938618, 0.938986, 0.939352, 0.939718, 0.940082, 0.940446, 0.940808, 0.941169, 0.941530, 0.941889, 0.942247, 0.942605, 0.942961, 0.943316, 0.943670, 0.944023, 0.944375, 0.944726, 0.945076, 0.945425, 0.945773, 0.946120, 0.946465, 0.946810, 0.947154, 0.947496, 0.947838, 0.948178, 0.948518, 0.948856, 0.949193, 0.949530, 0.949865, 0.950199, 0.950532, 0.950864, 0.951195, 0.951525, 0.951854, 0.952181, 0.952508, 0.952834, 0.953158, 0.953482, 0.953804, 0.954126, 0.954446, 0.954765, 0.955083, 0.955401, 0.955717, 0.956032, 0.956345, 0.956658, 0.956970, 0.957281, 0.957590, 0.957899, 0.958206, 0.958513, 0.958818, 0.959122, 0.959425, 0.959727, 0.960028, 0.960328, 0.960627, 0.960925, 0.961221, 0.961517, 0.961811, 0.962105, 0.962397, 0.962688, 0.962978, 0.963267, 0.963555, 0.963842, 0.964128, 0.964412, 0.964696, 0.964979, 0.965260, 0.965540, 0.965819, 0.966097, 0.966374, 0.966650, 0.966925, 0.967199, 0.967472, 0.967743, 0.968013, 0.968283, 0.968551, 0.968818, 0.969084, 0.969349, 0.969613, 0.969875, 0.970137, 0.970398, 0.970657, 0.970915, 0.971172, 0.971428, 0.971683, 0.971937, 0.972190, 0.972441, 0.972692, 0.972941, 0.973190, 0.973437, 0.973683, 0.973928, 0.974172, 0.974414, 0.974656, 0.974896, 0.975136, 0.975374, 0.975611, 0.975847, 0.976082, 0.976316, 0.976548, 0.976780, 0.977010, 0.977240, 0.977468, 0.977695, 0.977921, 0.978146, 0.978369, 0.978592, 0.978813, 0.979033, 0.979253, 0.979471, 0.979688, 0.979903, 0.980118, 0.980331, 0.980544, 0.980755, 0.980965, 0.981174, 0.981382, 0.981589, 0.981794, 0.981999, 0.982202, 0.982404, 0.982606, 0.982805, 0.983004, 0.983202, 0.983398, 0.983594, 0.983788, 0.983981, 0.984173, 0.984364, 0.984554, 0.984742, 0.984930, 0.985116, 0.985301, 0.985485, 0.985668, 0.985850, 0.986030, 0.986210, 0.986388, 0.986565, 0.986741, 0.986916, 0.987090, 0.987262, 0.987433, 0.987604, 0.987773, 0.987941, 0.988108, 0.988273, 0.988438, 0.988601, 0.988763, 0.988925, 0.989084, 0.989243, 0.989401, 0.989557, 0.989713, 0.989867, 0.990020, 0.990172, 0.990322, 0.990472, 0.990620, 0.990768, 0.990914, 0.991059, 0.991202, 0.991345, 0.991487, 0.991627, 0.991766, 0.991904, 0.992041, 0.992177, 0.992311, 0.992445, 0.992577, 0.992708, 0.992838, 0.992966, 0.993094, 0.993220, 0.993346, 0.993470, 0.993593, 0.993715, 0.993835, 0.993955, 0.994073, 0.994190, 0.994306, 0.994421, 0.994535, 0.994647, 0.994758, 0.994868, 0.994977, 0.995085, 0.995192, 0.995297, 0.995402, 0.995505, 0.995607, 0.995708, 0.995807, 0.995906, 0.996003, 0.996100, 0.996195, 0.996288, 0.996381, 0.996473, 0.996563, 0.996652, 0.996740, 0.996827, 0.996913, 0.996997, 0.997080, 0.997163, 0.997244, 0.997323, 0.997402, 0.997480, 0.997556, 0.997631, 0.997705, 0.997778, 0.997849, 0.997920, 0.997989, 0.998057, 0.998124, 0.998190, 0.998255, 0.998318, 0.998380, 0.998441, 0.998501, 0.998560, 0.998618, 0.998674, 0.998729, 0.998783, 0.998836, 0.998888, 0.998938, 0.998988, 0.999036, 0.999083, 0.999129, 0.999173, 0.999217, 0.999259, 0.999300, 0.999340, 0.999379, 0.999417, 0.999453, 0.999488, 0.999522, 0.999555, 0.999587, 0.999618, 0.999647, 0.999675, 0.999702, 0.999728, 0.999753, 0.999776, 0.999799, 0.999820, 0.999840, 0.999859, 0.999876, 0.999893, 0.999908, 0.999922, 0.999935, 0.999947, 0.999958, 0.999967, 0.999975, 0.999982, 0.999988, 0.999993, 0.999996, 0.999999, 1.000000, 1.000000, 0.999999, 0.999996, 0.999993, 0.999988, 0.999982, 0.999975, 0.999967, 0.999958, 0.999947, 0.999935, 0.999922, 0.999908, 0.999893, 0.999876, 0.999859, 0.999840, 0.999820, 0.999799, 0.999776, 0.999753, 0.999728, 0.999702, 0.999675, 0.999647, 0.999618, 0.999587, 0.999555, 0.999522, 0.999488, 0.999453, 0.999417, 0.999379, 0.999340, 0.999300, 0.999259, 0.999217, 0.999173, 0.999129, 0.999083, 0.999036, 0.998988, 0.998938, 0.998888, 0.998836, 0.998783, 0.998729, 0.998674, 0.998618, 0.998560, 0.998501, 0.998441, 0.998380, 0.998318, 0.998255, 0.998190, 0.998124, 0.998057, 0.997989, 0.997920, 0.997849, 0.997778, 0.997705, 0.997631, 0.997556, 0.997480, 0.997402, 0.997323, 0.997244, 0.997163, 0.997080, 0.996997, 0.996913, 0.996827, 0.996740, 0.996652, 0.996563, 0.996473, 0.996381, 0.996288, 0.996195, 0.996100, 0.996003, 0.995906, 0.995807, 0.995708, 0.995607, 0.995505, 0.995402, 0.995297, 0.995192, 0.995085, 0.994977, 0.994868, 0.994758, 0.994647, 0.994535, 0.994421, 0.994306, 0.994190, 0.994073, 0.993955, 0.993835, 0.993715, 0.993593, 0.993470, 0.993346, 0.993220, 0.993094, 0.992966, 0.992838, 0.992708, 0.992577, 0.992445, 0.992311, 0.992177, 0.992041, 0.991904, 0.991766, 0.991627, 0.991487, 0.991345, 0.991202, 0.991059, 0.990914, 0.990768, 0.990620, 0.990472, 0.990322, 0.990172, 0.990020, 0.989867, 0.989713, 0.989557, 0.989401, 0.989243, 0.989084, 0.988925, 0.988763, 0.988601, 0.988438, 0.988273, 0.988108, 0.987941, 0.987773, 0.987604, 0.987433, 0.987262, 0.987090, 0.986916, 0.986741, 0.986565, 0.986388, 0.986210, 0.986030, 0.985850, 0.985668, 0.985485, 0.985301, 0.985116, 0.984930, 0.984742, 0.984554, 0.984364, 0.984173, 0.983981, 0.983788, 0.983594, 0.983398, 0.983202, 0.983004, 0.982805, 0.982606, 0.982404, 0.982202, 0.981999, 0.981794, 0.981589, 0.981382, 0.981174, 0.980965, 0.980755, 0.980544, 0.980331, 0.980118, 0.979903, 0.979688, 0.979471, 0.979253, 0.979033, 0.978813, 0.978592, 0.978369, 0.978146, 0.977921, 0.977695, 0.977468, 0.977240, 0.977010, 0.976780, 0.976548, 0.976316, 0.976082, 0.975847, 0.975611, 0.975374, 0.975136, 0.974896, 0.974656, 0.974414, 0.974172, 0.973928, 0.973683, 0.973437, 0.973190, 0.972941, 0.972692, 0.972441, 0.972190, 0.971937, 0.971683, 0.971428, 0.971172, 0.970915, 0.970657, 0.970398, 0.970137, 0.969875, 0.969613, 0.969349, 0.969084, 0.968818, 0.968551, 0.968283, 0.968013, 0.967743, 0.967472, 0.967199, 0.966925, 0.966650, 0.966374, 0.966097, 0.965819, 0.965540, 0.965260, 0.964979, 0.964696, 0.964412, 0.964128, 0.963842, 0.963555, 0.963267, 0.962978, 0.962688, 0.962397, 0.962105, 0.961811, 0.961517, 0.961221, 0.960925, 0.960627, 0.960328, 0.960028, 0.959727, 0.959425, 0.959122, 0.958818, 0.958513, 0.958206, 0.957899, 0.957590, 0.957281, 0.956970, 0.956658, 0.956345, 0.956032, 0.955717, 0.955401, 0.955083, 0.954765, 0.954446, 0.954126, 0.953804, 0.953482, 0.953158, 0.952834, 0.952508, 0.952181, 0.951854, 0.951525, 0.951195, 0.950864, 0.950532, 0.950199, 0.949865, 0.949530, 0.949193, 0.948856, 0.948518, 0.948178, 0.947838, 0.947496, 0.947154, 0.946810, 0.946465, 0.946120, 0.945773, 0.945425, 0.945076, 0.944726, 0.944375, 0.944023, 0.943670, 0.943316, 0.942961, 0.942605, 0.942247, 0.941889, 0.941530, 0.941169, 0.940808, 0.940446, 0.940082, 0.939718, 0.939352, 0.938986, 0.938618, 0.938249, 0.937880, 0.937509, 0.937137, 0.936765, 0.936391, 0.936016, 0.935640, 0.935263, 0.934885, 0.934507, 0.934127, 0.933746, 0.933364, 0.932981, 0.932597, 0.932212, 0.931826, 0.931439, 0.931051, 0.930662, 0.930271, 0.929880, 0.929488, 0.929095, 0.928701, 0.928306, 0.927910, 0.927513, 0.927114, 0.926715, 0.926315, 0.925914, 0.925512, 0.925109, 0.924704, 0.924299, 0.923893, 0.923486, 0.923078, 0.922669, 0.922258, 0.921847, 0.921435, 0.921022, 0.920608, 0.920193, 0.919777, 0.919360, 0.918942, 0.918523, 0.918102, 0.917681, 0.917259, 0.916836, 0.916413, 0.915988, 0.915562, 0.915135, 0.914707, 0.914278, 0.913848, 0.913417, 0.912986, 0.912553, 0.912119, 0.911685, 0.911249, 0.910812, 0.910375, 0.909936, 0.909497, 0.909056, 0.908615, 0.908172, 0.907729, 0.907285, 0.906839, 0.906393, 0.905946, 0.905498, 0.905049, 0.904599, 0.904148, 0.903696, 0.903243, 0.902789, 0.902334, 0.901878, 0.901422, 0.900964, 0.900505, 0.900046, 0.899586, 0.899124, 0.898662, 0.898198, 0.897734, 0.897269, 0.896803, 0.896336, 0.895868, 0.895399, 0.894929, 0.894459, 0.893987, 0.893514, 0.893041, 0.892566, 0.892091, 0.891615, 0.891138, 0.890659, 0.890180, 0.889700, 0.889220, 0.888738, 0.888255, 0.887771, 0.887287, 0.886801, 0.886315, 0.885828, 0.885340, 0.884851, 0.884361, 0.883870, 0.883378, 0.882885, 0.882392, 0.881897, 0.881402, 0.880906, 0.880408, 0.879910, 0.879411, 0.878911, 0.878411, 0.877909, 0.877406, 0.876903, 0.876399, 0.875894, 0.875387, 0.874881, 0.874373, 0.873864, 0.873354, 0.872844, 0.872333, 0.871820, 0.871307, 0.870793, 0.870278, 0.869763, 0.869246, 0.868729, 0.868210, 0.867691, 0.867171, 0.866650, 0.866128, 0.865606, 0.865082, 0.864558, 0.864033, 0.863506, 0.862980, 0.862452, 0.861923, 0.861394, 0.860863, 0.860332, 0.859800, 0.859267, 0.858733, 0.858199, 0.857663, 0.857127, 0.856590, 0.856052, 0.855513, 0.854974, 0.854433, 0.853892, 0.853350, 0.852807, 0.852263, 0.851719, 0.851173, 0.850627, 0.850080, 0.849532, 0.848983, 0.848434, 0.847883, 0.847332, 0.846780, 0.846227, 0.845674, 0.845119, 0.844564, 0.844008, 0.843451, 0.842894, 0.842335, 0.841776, 0.841216, 0.840655, 0.840093, 0.839531, 0.838967, 0.838403, 0.837838, 0.837273, 0.836706, 0.836139, 0.835571, 0.835002, 0.834432, 0.833862, 0.833291, 0.832719, 0.832146, 0.831572, 0.830998, 0.830423, 0.829847, 0.829270, 0.828693, 0.828115, 0.827536, 0.826956, 0.826375, 0.825794, 0.825212, 0.824629, 0.824046, 0.823461, 0.822876, 0.822290, 0.821704, 0.821116, 0.820528, 0.819939, 0.819350, 0.818759, 0.818168, 0.817576, 0.816984, 0.816390, 0.815796, 0.815201, 0.814606, 0.814009, 0.813412, 0.812814, 0.812216, 0.811616, 0.811016, 0.810416, 0.809814, 0.809212, 0.808609, 0.808005, 0.807401, 0.806796, 0.806190, 0.805583, 0.804976, 0.804368, 0.803759, 0.803150, 0.802540, 0.801929, 0.801317, 0.800705, 0.800092, 0.799478, 0.798864, 0.798249, 0.797633, 0.797017, 0.796399, 0.795781, 0.795163, 0.794544, 0.793924, 0.793303, 0.792682, 0.792060, 0.791437, 0.790813, 0.790189, 0.789565, 0.788939, 0.788313, 0.787686, 0.787059, 0.786430, 0.785802, 0.785172, 0.784542, 0.783911, 0.783279, 0.782647, 0.782014, 0.781381, 0.780747, 0.780112, 0.779476, 0.778840, 0.778203, 0.777566, 0.776928, 0.776289, 0.775650, 0.775010, 0.774369, 0.773727, 0.773085, 0.772443, 0.771799, 0.771156, 0.770511, 0.769866, 0.769220, 0.768573, 0.767926, 0.767279, 0.766630, 0.765981, 0.765332, 0.764681, 0.764031, 0.763379, 0.762727, 0.762074, 0.761421, 0.760767, 0.760112, 0.759457, 0.758801, 0.758145, 0.757488, 0.756830, 0.756172, 0.755513, 0.754854, 0.754194, 0.753533, 0.752872, 0.752210, 0.751548, 0.750885, 0.750221, 0.749557, 0.748892, 0.748227, 0.747561, 0.746895, 0.746228, 0.745560, 0.744892, 0.744223, 0.743553, 0.742883, 0.742213, 0.741542, 0.740870, 0.740198, 0.739525, 0.738852, 0.738178, 0.737503, 0.736828, 0.736153, 0.735476, 0.734800, 0.734122, 0.733445, 0.732766, 0.732087, 0.731408, 0.730728, 0.730047, 0.729366, 0.728685, 0.728002, 0.727320, 0.726636, 0.725953, 0.725268, 0.724584, 0.723898, 0.723212, 0.722526, 0.721839, 0.721152, 0.720464, 0.719775, 0.719086, 0.718396, 0.717706, 0.717016, 0.716325, 0.715633, 0.714941, 0.714249, 0.713555, 0.712862, 0.712168, 0.711473, 0.710778, 0.710083, 0.709386, 0.708690, 0.707993, 0.707295, 0.706597, 0.705899, 0.705200, 0.704500, 0.703800, 0.703100, 0.702399, 0.701697, 0.700996, 0.700293, 0.699590, 0.698887, 0.698183, 0.697479, 0.696774, 0.696069, 0.695364, 0.694658, 0.693951, 0.693244, 0.692537, 0.691829, 0.691120, 0.690412, 0.689702, 0.688993, 0.688282, 0.687572, 0.686861, 0.686149, 0.685437, 0.684725, 0.684012, 0.683299, 0.682586, 0.681871, 0.681157, 0.680442, 0.679727, 0.679011, 0.678295, 0.677578, 0.676861, 0.676144, 0.675426, 0.674708, 0.673989, 0.673270, 0.672550, 0.671830, 0.671110, 0.670389, 0.669668, 0.668947, 0.668225, 0.667503, 0.666780, 0.666057, 0.665333, 0.664610, 0.663885, 0.663161, 0.662436, 0.661710, 0.660984, 0.660258, 0.659532, 0.658805, 0.658078, 0.657350, 0.656622, 0.655893, 0.655165, 0.654436, 0.653706, 0.652976, 0.652246, 0.651515, 0.650785, 0.650053, 0.649322, 0.648590, 0.647857, 0.647125, 0.646392, 0.645658, 0.644924, 0.644190, 0.643456, 0.642721, 0.641986, 0.641251, 0.640515, 0.639779, 0.639043, 0.638306, 0.637569, 0.636831, 0.636094, 0.635356, 0.634617, 0.633879, 0.633140, 0.632401, 0.631661, 0.630921, 0.630181, 0.629440, 0.628700, 0.627958, 0.627217, 0.626475, 0.625733, 0.624991, 0.624248, 0.623505, 0.622762, 0.622019, 0.621275, 0.620531, 0.619787, 0.619042, 0.618297, 0.617552, 0.616807, 0.616061, 0.615315, 0.614569, 0.613822, 0.613075, 0.612328, 0.611581, 0.610833, 0.610085, 0.609337, 0.608589, 0.607840, 0.607091, 0.606342, 0.605593, 0.604843, 0.604093, 0.603343, 0.602593, 0.601842, 0.601091, 0.600340, 0.599589, 0.598837, 0.598086, 0.597334, 0.596581, 0.595829, 0.595076, 0.594323, 0.593570, 0.592817, 0.592063, 0.591309, 0.590555, 0.589801, 0.589047, 0.588292, 0.587537, 0.586782, 0.586027, 0.585271, 0.584516, 0.583760, 0.583004, 0.582248, 0.581491, 0.580734, 0.579978, 0.579221, 0.578463, 0.577706, 0.576948, 0.576191, 0.575433, 0.574675, 0.573916, 0.573158, 0.572399, 0.571640, 0.570881, 0.570122, 0.569363, 0.568603, 0.567844, 0.567084, 0.566324, 0.565564, 0.564804, 0.564043, 0.563283, 0.562522, 0.561761, 0.561000, 0.560239, 0.559478, 0.558716, 0.557955, 0.557193, 0.556431, 0.555669, 0.554907, 0.554145, 0.553383, 0.552620, 0.551857, 0.551095, 0.550332, 0.549569, 0.548806, 0.548043, 0.547279, 0.546516, 0.545752, 0.544989, 0.544225, 0.543461, 0.542697, 0.541933, 0.541169, 0.540405, 0.539640, 0.538876, 0.538111, 0.537347, 0.536582, 0.535817, 0.535052, 0.534288, 0.533522, 0.532757, 0.531992, 0.531227, 0.530462, 0.529696, 0.528931, 0.528165, 0.527399, 0.526634, 0.525868, 0.525102, 0.524336, 0.523570, 0.522804, 0.522038, 0.521272, 0.520506, 0.519740, 0.518974, 0.518208, 0.517441, 0.516675, 0.515908, 0.515142, 0.514376, 0.513609, 0.512843, 0.512076, 0.511309, 0.510543, 0.509776, 0.509009, 0.508243, 0.507476, 0.506709, 0.505943, 0.505176, 0.504409, 0.503642, 0.502875, 0.502109, 0.501342, 0.500575, 0.499808, 0.499041, 0.498275, 0.497508, 0.496741, 0.495974, 0.495208, 0.494441, 0.493674, 0.492907, 0.492141, 0.491374, 0.490607, 0.489841, 0.489074, 0.488307, 0.487541, 0.486774, 0.486008, 0.485241, 0.484475, 0.483708, 0.482942, 0.482176, 0.481409, 0.480643, 0.479877, 0.479111, 0.478345, 0.477579, 0.476813, 0.476047, 0.475281, 0.474515, 0.473749, 0.472983, 0.472218, 0.471452, 0.470687, 0.469921, 0.469156, 0.468390, 0.467625, 0.466860, 0.466095, 0.465330, 0.464565, 0.463800, 0.463036, 0.462271, 0.461506, 0.460742, 0.459977, 0.459213, 0.458449, 0.457685, 0.456921, 0.456157, 0.455393, 0.454629, 0.453866, 0.453102, 0.452339, 0.451576, 0.450813, 0.450050, 0.449287, 0.448524, 0.447761, 0.446999, 0.446236, 0.445474, 0.444712, 0.443950, 0.443188, 0.442426, 0.441664, 0.440903, 0.440142, 0.439380, 0.438619, 0.437858, 0.437098, 0.436337, 0.435576, 0.434816, 0.434056, 0.433296, 0.432536, 0.431776, 0.431017, 0.430257, 0.429498, 0.428739, 0.427980, 0.427221, 0.426463, 0.425705, 0.424946, 0.424188, 0.423430, 0.422673, 0.421915, 0.421158, 0.420401, 0.419644, 0.418887, 0.418131, 0.417374, 0.416618, 0.415862, 0.415106, 0.414351, 0.413595, 0.412840, 0.412085, 0.411331, 0.410576, 0.409822, 0.409068, 0.408314, 0.407560, 0.406807, 0.406053, 0.405300, 0.404547, 0.403795, 0.403042, 0.402290, 0.401538, 0.400787, 0.400035, 0.399284, 0.398533, 0.397782, 0.397032, 0.396282, 0.395532, 0.394782, 0.394032, 0.393283, 0.392534, 0.391785, 0.391037, 0.390289, 0.389541, 0.388793, 0.388045, 0.387298, 0.386551, 0.385805, 0.385058, 0.384312, 0.383566, 0.382821, 0.382075, 0.381330, 0.380586, 0.379841, 0.379097, 0.378353, 0.377609, 0.376866, 0.376123, 0.375380, 0.374638, 0.373896, 0.373154, 0.372412, 0.371671, 0.370930, 0.370189, 0.369449, 0.368709, 0.367969, 0.367230, 0.366491, 0.365752, 0.365013, 0.364275, 0.363537, 0.362800, 0.362063, 0.361326, 0.360589, 0.359853, 0.359117, 0.358381, 0.357646, 0.356911, 0.356177, 0.355443, 0.354709, 0.353975, 0.353242, 0.352509, 0.351777, 0.351044, 0.350313, 0.349581, 0.348850, 0.348119, 0.347389, 0.346659, 0.345929, 0.345200, 0.344471, 0.343742, 0.343014, 0.342286, 0.341559, 0.340832, 0.340105, 0.339379, 0.338653, 0.337927, 0.337202, 0.336477, 0.335753, 0.335028, 0.334305, 0.333582, 0.332859, 0.332136, 0.331414, 0.330692, 0.329971, 0.329250, 0.328530, 0.327810, 0.327090, 0.326371, 0.325652, 0.324933, 0.324215, 0.323498, 0.322780, 0.322063, 0.321347, 0.320631, 0.319916, 0.319200, 0.318486, 0.317771, 0.317058, 0.316344, 0.315631, 0.314919, 0.314207, 0.313495, 0.312784, 0.312073, 0.311362, 0.310653, 0.309943, 0.309234, 0.308525, 0.307817, 0.307110, 0.306402, 0.305696, 0.304989, 0.304284, 0.303578, 0.302873, 0.302169, 0.301465, 0.300761, 0.300058, 0.299356, 0.298653, 0.297952, 0.297251, 0.296550, 0.295850, 0.295150, 0.294451, 0.293752, 0.293054, 0.292356, 0.291659, 0.290962, 0.290265, 0.289570, 0.288874, 0.288179, 0.287485, 0.286791, 0.286098, 0.285405, 0.284713, 0.284021, 0.283330, 0.282639, 0.281948, 0.281259, 0.280569, 0.279881, 0.279192, 0.278505, 0.277817, 0.277131, 0.276445, 0.275759, 0.275074, 0.274389, 0.273705, 0.273022, 0.272339, 0.271656, 0.270975, 0.270293, 0.269612, 0.268932, 0.268252, 0.267573, 0.266894, 0.266216, 0.265539, 0.264862, 0.264185, 0.263510, 0.262834, 0.262159, 0.261485, 0.260812, 0.260138, 0.259466, 0.258794, 0.258123, 0.257452, 0.256782, 0.256112, 0.255443, 0.254774, 0.254106, 0.253439, 0.252772, 0.252106, 0.251440, 0.250775, 0.250111, 0.249447, 0.248784, 0.248121, 0.247459, 0.246797, 0.246136, 0.245476, 0.244816, 0.244157, 0.243499, 0.242841, 0.242183, 0.241527, 0.240871, 0.240215, 0.239560, 0.238906, 0.238252, 0.237599, 0.236947, 0.236295, 0.235644, 0.234993, 0.234343, 0.233694, 0.233045, 0.232397, 0.231750, 0.231103, 0.230457, 0.229812, 0.229167, 0.228522, 0.227879, 0.227236, 0.226593, 0.225952, 0.225311, 0.224670, 0.224031, 0.223392, 0.222753, 0.222115, 0.221478, 0.220842, 0.220206, 0.219571, 0.218936, 0.218302, 0.217669, 0.217037, 0.216405, 0.215773, 0.215143, 0.214513, 0.213884, 0.213255, 0.212628, 0.212000, 0.211374, 0.210748, 0.210123, 0.209499, 0.208875, 0.208252, 0.207629, 0.207008, 0.206387, 0.205766, 0.205147, 0.204528, 0.203909, 0.203292, 0.202675, 0.202059, 0.201443, 0.200829, 0.200215, 0.199601, 0.198989, 0.198377, 0.197766, 0.197155, 0.196545, 0.195936, 0.195328, 0.194720, 0.194113, 0.193507, 0.192902, 0.192297, 0.191693, 0.191089, 0.190487, 0.189885, 0.189284, 0.188684, 0.188084, 0.187485, 0.186887, 0.186289, 0.185693, 0.185097, 0.184501, 0.183907, 0.183313, 0.182720, 0.182128, 0.181536, 0.180945, 0.180355, 0.179766, 0.179178, 0.178590, 0.178003, 0.177417, 0.176831, 0.176246, 0.175662, 0.175079, 0.174497, 0.173915, 0.173334, 0.172754, 0.172175, 0.171596, 0.171018, 0.170441, 0.169865, 0.169289, 0.168715, 0.168141, 0.167568, 0.166995, 0.166424, 0.165853, 0.165283, 0.164714, 0.164145, 0.163577, 0.163011, 0.162444, 0.161879, 0.161315, 0.160751, 0.160188, 0.159626, 0.159065, 0.158504, 0.157945, 0.157386, 0.156828, 0.156270, 0.155714, 0.155158, 0.154603, 0.154049, 0.153496, 0.152944, 0.152392, 0.151841, 0.151291, 0.150742, 0.150194, 0.149646, 0.149100, 0.148554, 0.148009, 0.147465, 0.146921, 0.146379, 0.145837, 0.145296, 0.144756, 0.144217, 0.143679, 0.143141, 0.142605, 0.142069, 0.141534, 0.141000, 0.140466, 0.139934, 0.139402, 0.138871, 0.138342, 0.137812, 0.137284, 0.136757, 0.136230, 0.135705, 0.135180, 0.134656, 0.134133, 0.133611, 0.133089, 0.132569, 0.132049, 0.131530, 0.131013, 0.130496, 0.129979, 0.129464, 0.128950, 0.128436, 0.127923, 0.127412, 0.126901, 0.126391, 0.125882, 0.125373, 0.124866, 0.124359, 0.123854, 0.123349, 0.122845, 0.122342, 0.121840, 0.121339, 0.120839, 0.120339, 0.119841, 0.119343, 0.118846, 0.118350, 0.117855, 0.117361, 0.116868, 0.116376, 0.115885, 0.115394, 0.114905, 0.114416, 0.113928, 0.113442, 0.112956, 0.112471, 0.111987, 0.111503, 0.111021, 0.110540, 0.110059, 0.109580, 0.109101, 0.108624, 0.108147, 0.107671, 0.107196, 0.106722, 0.106249, 0.105777, 0.105306, 0.104836, 0.104366, 0.103898, 0.103430, 0.102964, 0.102498, 0.102033, 0.101570, 0.101107, 0.100645, 0.100184, 0.099724, 0.099265, 0.098807, 0.098350, 0.097894, 0.097438, 0.096984, 0.096531, 0.096078, 0.095627, 0.095176, 0.094727, 0.094278, 0.093830, 0.093384, 0.092938, 0.092493, 0.092049, 0.091606, 0.091164, 0.090724, 0.090284, 0.089844, 0.089406, 0.088969, 0.088533, 0.088098, 0.087664, 0.087231, 0.086798, 0.086367, 0.085937, 0.085507, 0.085079, 0.084652, 0.084225, 0.083800, 0.083375, 0.082952, 0.082529, 0.082108, 0.081687, 0.081268, 0.080849, 0.080432, 0.080015, 0.079600, 0.079185, 0.078771, 0.078359, 0.077947, 0.077536, 0.077127, 0.076718, 0.076310, 0.075904, 0.075498, 0.075093, 0.074690, 0.074287, 0.073885, 0.073485, 0.073085, 0.072686, 0.072289, 0.071892, 0.071496, 0.071102, 0.070708, 0.070316, 0.069924, 0.069533, 0.069144, 0.068755, 0.068368, 0.067981, 0.067596, 0.067211, 0.066828, 0.066445, 0.066064, 0.065683, 0.065304, 0.064926, 0.064548, 0.064172, 0.063796, 0.063422, 0.063049, 0.062677, 0.062306, 0.061935, 0.061566, 0.061198, 0.060831, 0.060465, 0.060100, 0.059736, 0.059373, 0.059011, 0.058650, 0.058290, 0.057932, 0.057574, 0.057217, 0.056862, 0.056507, 0.056153, 0.055801, 0.055449, 0.055099, 0.054749, 0.054401, 0.054054, 0.053707, 0.053362, 0.053018, 0.052675, 0.052333, 0.051992, 0.051652, 0.051313, 0.050975, 0.050638, 0.050303, 0.049968, 0.049634, 0.049302, 0.048970, 0.048640, 0.048311, 0.047982, 0.047655, 0.047329, 0.047004, 0.046680, 0.046357, 0.046035, 0.045714, 0.045394, 0.045075, 0.044758, 0.044441, 0.044126, 0.043811, 0.043498, 0.043186, 0.042874, 0.042564, 0.042255, 0.041947, 0.041640, 0.041335, 0.041030, 0.040726, 0.040424, 0.040122, 0.039822, 0.039522, 0.039224, 0.038927, 0.038631, 0.038336, 0.038042, 0.037749, 0.037457, 0.037167, 0.036877, 0.036589, 0.036301, 0.036015, 0.035730, 0.035446, 0.035163, 0.034881, 0.034600, 0.034320, 0.034041, 0.033764, 0.033487, 0.033212, 0.032938, 0.032665, 0.032393, 0.032122, 0.031852, 0.031583, 0.031315, 0.031049, 0.030783, 0.030519, 0.030256, 0.029994, 0.029733, 0.029473, 0.029214, 0.028956, 0.028700, 0.028444, 0.028190, 0.027936, 0.027684, 0.027433, 0.027183, 0.026934, 0.026687, 0.026440, 0.026195, 0.025950, 0.025707, 0.025465, 0.025224, 0.024984, 0.024745, 0.024507, 0.024271, 0.024035, 0.023801, 0.023568, 0.023336, 0.023105, 0.022875, 0.022646, 0.022419, 0.022192, 0.021967, 0.021743, 0.021519, 0.021297, 0.021077, 0.020857, 0.020638, 0.020421, 0.020204, 0.019989, 0.019775, 0.019562, 0.019350, 0.019140, 0.018930, 0.018722, 0.018514, 0.018308, 0.018103, 0.017899, 0.017697, 0.017495, 0.017294, 0.017095, 0.016897, 0.016700, 0.016504, 0.016309, 0.016115, 0.015923, 0.015731, 0.015541, 0.015352, 0.015164, 0.014977, 0.014791, 0.014607, 0.014423, 0.014241, 0.014060, 0.013880, 0.013701, 0.013523, 0.013347, 0.013171, 0.012997, 0.012824, 0.012652, 0.012481, 0.012312, 0.012143, 0.011976, 0.011809, 0.011644, 0.011480, 0.011318, 0.011156, 0.010995, 0.010836, 0.010678, 0.010521, 0.010365, 0.010210, 0.010057, 0.009904, 0.009753, 0.009603, 0.009454, 0.009306, 0.009159, 0.009014, 0.008869, 0.008726, 0.008584, 0.008443, 0.008303, 0.008165, 0.008027, 0.007891, 0.007756, 0.007622, 0.007489, 0.007358, 0.007227, 0.007098, 0.006970, 0.006843, 0.006717, 0.006592, 0.006469, 0.006346, 0.006225, 0.006105, 0.005986, 0.005868, 0.005752, 0.005636, 0.005522, 0.005409, 0.005297, 0.005186, 0.005077, 0.004968, 0.004861, 0.004755, 0.004650, 0.004546, 0.004444, 0.004342, 0.004242, 0.004143, 0.004045, 0.003948, 0.003853, 0.003758, 0.003665, 0.003573, 0.003482, 0.003392, 0.003304, 0.003216, 0.003130, 0.003045, 0.002961, 0.002878, 0.002797, 0.002716, 0.002637, 0.002559, 0.002482, 0.002406, 0.002332, 0.002259, 0.002186, 0.002115, 0.002045, 0.001977, 0.001909, 0.001843, 0.001778, 0.001714, 0.001651, 0.001589, 0.001529, 0.001469, 0.001411, 0.001354, 0.001298, 0.001244, 0.001190, 0.001138, 0.001087, 0.001037, 0.000988, 0.000940, 0.000894, 0.000849, 0.000805, 0.000762, 0.000720, 0.000680, 0.000640, 0.000602, 0.000565, 0.000529, 0.000494, 0.000461, 0.000429, 0.000397, 0.000367, 0.000339, 0.000311, 0.000285, 0.000259, 0.000235, 0.000212, 0.000190, 0.000170, 0.000151, 0.000132, 0.000115, 0.000099, 0.000085, 0.000071, 0.000059, 0.000048, 0.000038, 0.000029, 0.000021, 0.000015, 0.000009, 0.000005, 0.000002, 0.000001 };

//  频率带划分
//        80 Hz - 250 Hz
//        250 Hz - 500 Hz
//        500 Hz - 1000 Hz
//        1000 Hz - 2000 Hz
//        2000 Hz - 3000 Hz
//        3000 Hz - 4000 Hz
//        4000 Hz - 8000 Hz
//        8000 Hz - 24000 Hz

const int BAND_NUM = 8;
int band[BAND_NUM+1] = { 80, 500, 1100, 1750, 2500,3500,4500,6000, 8000};
const float Threshold[BAND_NUM] = {1,0.7,0.65,0.65,0.65,0.6,0.6,0.6};

//int band[BAND_NUM + 1] = { 80, 500, 1000, 1500,2000,2500,3000,3500,4000,4500,5000,5500,6000,6500,7000,7500,8000 };
struct bandinfo
{
    float v;
    int idx;
};

float GetStd(float*arr,int size)
{
    float mean = 0;
    for ( int i = 0; i < size; i++ )
    {
        mean += arr[i];
    }
    mean /= size;
    float std = 0;
    for ( int i = 0; i < size; i++ )
    {
        std += ( arr[i] - mean ) * ( arr[i] - mean );
    }

    std /= size;
    std = sqrt( std );
    std /= mean;
    return std;
}

void test_audio_ns()
{
    {

    WavReader reader_rec( "D:/log/all_16000.wav" );
    int samplerate = reader_rec.sample_rate();
    int channel = reader_rec.num_channels();
    WavWriter writer( "D:/log/test1.wav", samplerate, channel );

    const int frame = 512;// pow( 2, static_cast<int>( log2( samplerate / 100 ) ) + 1 );
    const float bandunit = frame / (float)samplerate;
    complex pData[frame];// = new complex[frame];
    int16_t*pPCMData = new int16_t[frame];
    memset( pPCMData, 0, frame );
    float bands[41];
    float energy[frame] = { 0 };
    float std[BAND_NUM] = { 0 };
    for ( int k = 1; k < 100000; k++ )
    {
        if ( 0 == reader_rec.ReadSamples( frame, pPCMData ) )
        {
            break;
        }
        for ( int i = 0; i < frame; i++ )
        {
            pData[i] = S16ToFloat( pPCMData[i] )/**hw[i]*/;
        }

        CFFT::Forward( pData, frame );

        float sum = 0;
        for ( int i = 0; i < BAND_NUM; i++ )
        {
            bands[i] = 0;
            int start = band[i] * bandunit;
            int end = band[i + 1] * bandunit;
            for ( int j = start; j < end; j++ )
            {
                energy[j] = ( pData[j].real() * pData[j].real() + pData[j].imag() * pData[j].imag() );
                bands[i] += energy[j];
            }
            std[i] = GetStd( energy + start, end - start - 1 );
            sum += bands[i];
            bands[i] /= ( end - start );
        }
        sum /= 256;
        bandinfo bi[BAND_NUM];
        for ( int i = 0; i < BAND_NUM; i++ )
        {
            bi[i].idx = i;
            bi[i].v = bands[i];
        }

        sort( bi, bi + BAND_NUM, [] ( const bandinfo& l, const bandinfo& r ) { return l.v > r.v; } );
        sum = 0;
        for ( int i = 0; i < BAND_NUM; i++ )
        {
            printf( "%.3f  ", bands[i] );
            sum += bi[i].v;
        }
        int maxidx = bi[0].idx;
        float scale = bi[0].v / sum;
        float flag = 1;
        printf( "[%d]%.3f std=%f  ", bi[0].idx, scale, std[maxidx] );
        flag = Threshold[maxidx];
        const float CoefVar[BAND_NUM] = { 4, 1, 1, 1, 1, 1, 1, 1 };
        float add = 0.0;
        if (scale > 0.85)
        {
            add = 0.3;
        }
        if ( flag < scale && std[maxidx] > CoefVar[maxidx] - add )
        {
            memset( pPCMData, 0, frame * 2 );
           // printf( "[%d]%.3f std=%f  ", bi[0].idx, scale, std[maxidx] );
        }
       // printf( "%d-%d\n", ( k - 1 ) * frame * 1000 / samplerate, k * frame * 1000 / samplerate );
        writer.WriteSamples( pPCMData, frame );
        int start = band[maxidx] * bandunit;
        int end = band[maxidx] * bandunit;
        int len = end - start - 1;
        len /= 10;
        for ( int i = 0; i < 10; i++ )
        {
            bands[i] = 0;

            for ( int j = start + len*i; j < len; j++ )
             {
                energy[j] = ( pData[j].real() * pData[j].real() + pData[j].imag() * pData[j].imag() );
                bands[i] += energy[j];
            }
            std[i] = GetStd( energy + start, end - start - 1 );
            sum += bands[i];
            bands[i] /= ( end - start );
        }
    }
}
    test_audio_processing();
}

#include "codec/aac/libAACenc/include/aacenc_lib.h"
void test_aac_enc()
{
    WavReader reader( "E:\\CloudMusic\\Mariage.wav" );
    int channel = reader.num_channels();
    int samplerate = reader.sample_rate();

    auto aacfile = AudioWriter::Create( "D:/Mariage.aac", samplerate, channel, AFT_AAC );
    int frame = 882;
    int16_t*buf = new int16_t[frame];
    for ( ;; )
    {
        auto len = reader.ReadSamples( 882, buf );
        if (len>0)
        {
            aacfile->WriteSamples( buf, len );
        }
        else
        {
            break;
        }
    }

    aacfile->Destroy();
    delete[] buf;
}

#include "codec/aac/libAACdec/include/aacdecoder_lib.h"
void test_aac_dec()
{
    WavWriter* writer = nullptr;// ( "D:/myvoice.wav" );
    FILE* file = fopen( "D:/myvoice.aac","rb" );
    HANDLE_AACDECODER aacDecoderInfo = aacDecoder_Open( TT_MP4_ADTS, 1 );
    
    AAC_DECODER_ERROR err;
    err = aacDecoder_SetParam( aacDecoderInfo, AAC_DRC_REFERENCE_LEVEL, 1 );
    uint8_t* buf = new uint8_t[2048];
    UINT bufsize = 2048;
    INT_PCM* outbuf = new INT_PCM[4096];
    CStreamInfo* pStreamInfo = nullptr;
    UINT bytevalid=0;
    for ( ;; )
    {
        if (bytevalid == 0)
        {
            bufsize = fread( buf, 1, 2048, file );
            if ( bufsize == 0 )
            {
                break;
            }
            bytevalid = bufsize;
        }
        UINT startpos = bufsize - bytevalid;
        bufsize = bytevalid;
        UCHAR*p = buf + startpos;
        err = aacDecoder_Fill( aacDecoderInfo, &p, &bufsize, &bytevalid );
        if ( err != AAC_DEC_OK )
        {
            printf( "aacDecoder_Fill() failed: 0x%x", err );
            return;
        }
        if ( bytevalid != 0 )
        {
            printf("bytevalid = %d\n",bytevalid);
        }
        for ( ;; )
        {
            err = aacDecoder_DecodeFrame( aacDecoderInfo, outbuf, 4096, 0 );
            if ( err == AAC_DEC_NOT_ENOUGH_BITS )
            {
                break;
            }
            else if ( err != AAC_DEC_OK )
            {
                break;
            }
            if ( !pStreamInfo )
            {
                pStreamInfo = aacDecoder_GetStreamInfo( aacDecoderInfo );
                writer = new WavWriter( "D:/myvoice.wav", pStreamInfo->sampleRate, pStreamInfo->numChannels );
            }
            writer->WriteSamples( outbuf, pStreamInfo->frameSize*pStreamInfo->numChannels );
        }

    }
    aacDecoder_Close( aacDecoderInfo );
    if(writer)delete writer;
    delete[] buf;
    delete[] outbuf;
}
struct AACDecHeader 
{
    uint16_t Syncword;//12
    uint8_t version;//1
    uint8_t Layer;//2
    uint8_t ProtAbsent;//1
    uint8_t Profile;//2
    uint8_t sampleindex;//4
    uint8_t Private_Stream;//1
    uint8_t ChannelMode;//3;
    uint8_t Originality;//1
    uint8_t Home;//1
    uint8_t cr_Stream;//1
    uint8_t cr_Start;//1
    uint16_t frame_length;//13
    uint16_t buf_fullness;//11
    uint8_t num_frame;//2
    uint16_t CRC;//16
};
void test_aac_pasre_head()
{
    //‭111111111111 0 00 1 01 0111 0 010 0 0 0 0 0000010111001 00010101000 00‬
    FILE* file = fopen( "D:/myvoice.aac", "rb" );
    uint8_t header[7] = { 0 };
    AACDecHeader aacHeader;
    int index = 0;
    int seek = 0;
    for ( ;; )
    {
        if ( 7 != fread( header, 1, 7, file ) )
        {
            break;
        }
        uint8_t*p = header;
        aacHeader.Syncword = *p;
        p++;
        aacHeader.Syncword <<= 4;
        aacHeader.Syncword += (*p >> 4);
        aacHeader.version = (*p >> 3) & 0x1;
        aacHeader.Layer = (*p >> 1) & 0x3;
        aacHeader.ProtAbsent = *p & 0x1;
        p++;
        aacHeader.Profile = *p >> 6;//2
        aacHeader.sampleindex = ( *p >> 2 ) & 0x0f;//4
        aacHeader.Private_Stream = ( *p >> 1 ) & 0x1;
        aacHeader.ChannelMode = ( *p ) & 0x1;
        aacHeader.ChannelMode <<= 2;
        p++;
        aacHeader.ChannelMode += ( *p >> 6 ) & 0x3;//2
        aacHeader.Originality = ( *p >> 5 ) & 0x1;//1
        aacHeader.Home = ( *p >> 4 ) & 0x1;//1
        aacHeader.cr_Stream = ( *p >> 3 ) & 0x1;//1
        aacHeader.cr_Start = ( *p >> 2 ) & 0x1;//1
        aacHeader.frame_length = ( *p ) & 0x3;//2
        ++p;
        aacHeader.frame_length <<= 8;
        aacHeader.frame_length |= *p;
        aacHeader.frame_length <<= 3;
        ++p;
        aacHeader.frame_length |= *p >> 5;//3

        aacHeader.buf_fullness = *p & 0x1f;//5
        ++p;
        aacHeader.buf_fullness <<= 6;
        aacHeader.buf_fullness |= *p >> 2;//6
        aacHeader.num_frame = *p & 0x3;
        index++;
        printf( "[%d]frame_len = %d\t\t",index, aacHeader.frame_length );

        seek += aacHeader.frame_length;
        fseek(file,seek,SEEK_SET);
    }

    printf( "\n\n\n\n\n\n\nframe number=%d,sample_num=%d,time=%d", index, 4096 * ( index ), 4096 * ( index )/44100/2 );
    fclose( file );
}

#include "io/include/audioreader.h"
void test_aac_dec_file()
{
    AudioReader* pReader = AudioReader::Create( "D:/myvoice.aac", AFT_AAC );
    printf( "channel:%d",pReader->NumChannels() );
    printf( "samplerate:%d", pReader->SampleRate() );
    printf( "number sample:%d", pReader->NumSamples() );
    WavWriter writer( "D:/myvoice.wav", pReader->SampleRate(), pReader->NumChannels() );
    int16_t buf[4096];
    for ( int i = 0; i < 100;i++ )
    {
        int len = pReader->ReadSamples( 3000, buf );
        if ( len == 0 )
        {
            break;
        }
        writer.WriteSamples( buf, len );
    }
    pReader->SeekSamples( pReader->NumSamples() /2);
    for ( ;; )
    {
        int len = pReader->ReadSamples( 3000, buf );
        if (len == 0 )
        {
            break;
        }
        writer.WriteSamples( buf, len );
    }

    pReader->Destroy();
}
#include <filesystem>

void run_mp32wav( const char* filename )
{
    using file_path = std::tr2::sys::path;

    AudioReader *mp3reader = AudioReader::Create( filename, AFT_MP3 );
    if (mp3reader == nullptr)
    {
        return;
    }
    file_path p1 = filename;
    p1.replace_extension( ".wav" );

    WavWriter writer( p1.string().c_str(), mp3reader->SampleRate(), mp3reader->NumChannels() );
    int16_t buf[4096];
    for ( ;; )
    {
        int len = mp3reader->ReadSamples( 4096, buf );
        if (len == 0)
        {
            break;
        }
        writer.WriteSamples( buf, len );
    }
    mp3reader->Destroy();
}

int main( int argc, char** argv )
{
   // test_windows_core_audio();
   // test_conv();
   // test_hrtf(45,0,"C:/Users/zhangnaigan/Desktop/3D_test_Audio/es01.wav","D:/pro-48000-1.wav");
   // test_real_time_3d();
   // test_mit_hrtf_get();
    //test_circular_buffer();
   // test_play_mp3();
   // test_vcl( argc, argv );
    test_audio_ns();
   // test_audio_processing();


  //  test_aac_enc();
//    test_aac_dec();
//    test_aac_pasre_head();
 //   test_aac_dec_file();
//    run_mp32wav( "E:/CloudMusic/凡人歌.mp3" );
    system( "pause" );
    return 0;

}